// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"time"

	"github.com/golang-jwt/jwt/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJWTTokenParser creates a new instance of MockJWTTokenParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTTokenParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTTokenParser {
	mock := &MockJWTTokenParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTTokenParser is an autogenerated mock type for the JWTTokenParser type
type MockJWTTokenParser struct {
	mock.Mock
}

type MockJWTTokenParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTTokenParser) EXPECT() *MockJWTTokenParser_Expecter {
	return &MockJWTTokenParser_Expecter{mock: &_m.Mock}
}

// ParseJWT provides a mock function for the type MockJWTTokenParser
func (_mock *MockJWTTokenParser) ParseJWT(tokenString string, body []byte) (*jwt.Token, *customClaims, error) {
	ret := _mock.Called(tokenString, body)

	if len(ret) == 0 {
		panic("no return value specified for ParseJWT")
	}

	var r0 *jwt.Token
	var r1 *customClaims
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) (*jwt.Token, *customClaims, error)); ok {
		return returnFunc(tokenString, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []byte) *jwt.Token); ok {
		r0 = returnFunc(tokenString, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []byte) *customClaims); ok {
		r1 = returnFunc(tokenString, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customClaims)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, []byte) error); ok {
		r2 = returnFunc(tokenString, body)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockJWTTokenParser_ParseJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseJWT'
type MockJWTTokenParser_ParseJWT_Call struct {
	*mock.Call
}

// ParseJWT is a helper method to define mock.On call
//   - tokenString
//   - body
func (_e *MockJWTTokenParser_Expecter) ParseJWT(tokenString interface{}, body interface{}) *MockJWTTokenParser_ParseJWT_Call {
	return &MockJWTTokenParser_ParseJWT_Call{Call: _e.mock.On("ParseJWT", tokenString, body)}
}

func (_c *MockJWTTokenParser_ParseJWT_Call) Run(run func(tokenString string, body []byte)) *MockJWTTokenParser_ParseJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockJWTTokenParser_ParseJWT_Call) Return(token *jwt.Token, customClaimsMoqParam *customClaims, err error) *MockJWTTokenParser_ParseJWT_Call {
	_c.Call.Return(token, customClaimsMoqParam, err)
	return _c
}

func (_c *MockJWTTokenParser_ParseJWT_Call) RunAndReturn(run func(tokenString string, body []byte) (*jwt.Token, *customClaims, error)) *MockJWTTokenParser_ParseJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTTokenGenerator creates a new instance of MockJWTTokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTTokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTTokenGenerator {
	mock := &MockJWTTokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTTokenGenerator is an autogenerated mock type for the JWTTokenGenerator type
type MockJWTTokenGenerator struct {
	mock.Mock
}

type MockJWTTokenGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTTokenGenerator) EXPECT() *MockJWTTokenGenerator_Expecter {
	return &MockJWTTokenGenerator_Expecter{mock: &_m.Mock}
}

// GenerateJWT provides a mock function for the type MockJWTTokenGenerator
func (_mock *MockJWTTokenGenerator) GenerateJWT(body []byte, expiresAt time.Time) (string, error) {
	ret := _mock.Called(body, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte, time.Time) (string, error)); ok {
		return returnFunc(body, expiresAt)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte, time.Time) string); ok {
		r0 = returnFunc(body, expiresAt)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte, time.Time) error); ok {
		r1 = returnFunc(body, expiresAt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTTokenGenerator_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type MockJWTTokenGenerator_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - body
//   - expiresAt
func (_e *MockJWTTokenGenerator_Expecter) GenerateJWT(body interface{}, expiresAt interface{}) *MockJWTTokenGenerator_GenerateJWT_Call {
	return &MockJWTTokenGenerator_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", body, expiresAt)}
}

func (_c *MockJWTTokenGenerator_GenerateJWT_Call) Run(run func(body []byte, expiresAt time.Time)) *MockJWTTokenGenerator_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(time.Time))
	})
	return _c
}

func (_c *MockJWTTokenGenerator_GenerateJWT_Call) Return(s string, err error) *MockJWTTokenGenerator_GenerateJWT_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJWTTokenGenerator_GenerateJWT_Call) RunAndReturn(run func(body []byte, expiresAt time.Time) (string, error)) *MockJWTTokenGenerator_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}
