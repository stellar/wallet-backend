// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package apptracker

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAppTracker creates a new instance of MockAppTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppTracker {
	mock := &MockAppTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAppTracker is an autogenerated mock type for the AppTracker type
type MockAppTracker struct {
	mock.Mock
}

type MockAppTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppTracker) EXPECT() *MockAppTracker_Expecter {
	return &MockAppTracker_Expecter{mock: &_m.Mock}
}

// CaptureException provides a mock function for the type MockAppTracker
func (_mock *MockAppTracker) CaptureException(exception error) {
	_mock.Called(exception)
	return
}

// MockAppTracker_CaptureException_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureException'
type MockAppTracker_CaptureException_Call struct {
	*mock.Call
}

// CaptureException is a helper method to define mock.On call
//   - exception
func (_e *MockAppTracker_Expecter) CaptureException(exception interface{}) *MockAppTracker_CaptureException_Call {
	return &MockAppTracker_CaptureException_Call{Call: _e.mock.On("CaptureException", exception)}
}

func (_c *MockAppTracker_CaptureException_Call) Run(run func(exception error)) *MockAppTracker_CaptureException_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockAppTracker_CaptureException_Call) Return() *MockAppTracker_CaptureException_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAppTracker_CaptureException_Call) RunAndReturn(run func(exception error)) *MockAppTracker_CaptureException_Call {
	_c.Run(run)
	return _c
}

// CaptureMessage provides a mock function for the type MockAppTracker
func (_mock *MockAppTracker) CaptureMessage(message string) {
	_mock.Called(message)
	return
}

// MockAppTracker_CaptureMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureMessage'
type MockAppTracker_CaptureMessage_Call struct {
	*mock.Call
}

// CaptureMessage is a helper method to define mock.On call
//   - message
func (_e *MockAppTracker_Expecter) CaptureMessage(message interface{}) *MockAppTracker_CaptureMessage_Call {
	return &MockAppTracker_CaptureMessage_Call{Call: _e.mock.On("CaptureMessage", message)}
}

func (_c *MockAppTracker_CaptureMessage_Call) Run(run func(message string)) *MockAppTracker_CaptureMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAppTracker_CaptureMessage_Call) Return() *MockAppTracker_CaptureMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAppTracker_CaptureMessage_Call) RunAndReturn(run func(message string)) *MockAppTracker_CaptureMessage_Call {
	_c.Run(run)
	return _c
}
