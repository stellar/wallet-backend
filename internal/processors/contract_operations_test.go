package processors

import (
	"testing"
	"time"

	set "github.com/deckarep/golang-set/v2"
	"github.com/stellar/go/ingest"
	"github.com/stellar/go/network"
	operation_processor "github.com/stellar/go/processors/operation"
	"github.com/stellar/go/strkey"
	"github.com/stellar/go/xdr"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/stellar/wallet-backend/internal/utils"
)

func Test_calculateContractID(t *testing.T) {
	networkPassphrase := network.TestNetworkPassphrase
	salt := xdr.Uint256{195, 179, 60, 131, 211, 25, 160, 131, 45, 151, 203, 11, 11, 116, 166, 232, 51, 92, 179, 76, 220, 111, 96, 246, 72, 68, 195, 127, 194, 19, 147, 252}

	rawAddress, err := strkey.Decode(strkey.VersionByteAccountID, "GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U")
	require.NoError(t, err)
	var uint256Val xdr.Uint256
	copy(uint256Val[:], rawAddress)
	fromAddress := xdr.ScAddress{
		Type: xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: utils.PointOf(xdr.AccountId{
			Type:    xdr.PublicKeyTypePublicKeyTypeEd25519,
			Ed25519: &uint256Val,
		}),
	}

	contractID, err := calculateContractID(networkPassphrase, xdr.ContractIdPreimageFromAddress{
		Address: fromAddress,
		Salt:    salt,
	})
	require.NoError(t, err)
	require.Equal(t, "CANZKJUEZM22DO2XLJP4ARZAJFG7GJVBIEXJ7T4F2GAIAV4D4RMXMDVD", contractID)
}

func Test_contractIDForSorobanOperation(t *testing.T) {
	testCases := []struct {
		name               string
		ledgerCloseMetaXDR string
		txIndex            int
		opType             xdr.OperationType
		invokeOpSubtype    xdr.HostFunctionType
		networkPassphrase  string
		wantContractID     string
		wantErrContains    string
	}{
		{
			name:               "Non soroban",
			ledgerCloseMetaXDR: "AAAAAQAAAACjWYYNtFZUxjv6FGAnZ8L6CSf7ytYIXCyArS12dguSXgAAABapSzMX+8sS3z0eHcRIOIp1IVhJAyPIXhUO6mU/sllKE7W4/dEbkqPNqbDcOQO+tLWjI4uy9dWnIZ0VulDq1ApAAAAAAGhsdFMAAAAAAAAAAQAAAADVcmnZYlD3SW0Hm+LoNRI27//o05wuBr+rsUIfF/xnHAAAAEAhX+nVdBh+8oTwiZArfEeyVURrnqtdZ/S8zXdmFmy9UjtU8mYVMnSMyA9iBq9kL/dEhChYpcqKOW4T43znKgUAptWZu8y1Rz03aJ93f6DX9HnNC2LZxMHYtckut97m6ylepxBWpYbokWfRiPIBYzFHZkBJzWCrq930D1JmYrfFlgAFGAwN4Lazp2QAAAAAAUXAiCSEAAAAAAAAAAAAAAf+AAAAZABMS0AAAADI8n11PIjlWWgwHhGlYIB9cBI9fRRMrvcGDrWKv7qoFNIk7NfAZiW98Fu+FbQGjrHEhcTO4QnVdJqgNB53cpiHiBQNyHo9RHe6cli/6fXvI0stZzKGhuloxfOC8sMfrOl5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGpSzMX+8sS3z0eHcRIOIp1IVhJAyPIXhUO6mU/sllKEwAAAAIAAAAAAAAAAQAAAAAAAAABAAAAAAAAAGQAAAABAAAAAgAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogCYloAABRgKAAAAAQAAAAEAAAAAAAAAAAAAAABobHRqAAAAAAAAAAEAAAAAAAAACAAAAABKBB+2UBMP/abwcm/M1TXO+/JQWhPwkalgqizKmXyRIQAAAAAAAAABx/5sogAAAEAwAoi3cgvi5qxCtgFkj3mrCikUjkssgB90C+Dg4eoK+zAetF9Z4YkM/ChWI4IMbml+WsuqZueSCZjiGosp5FYLAAAAAAAAAAAAAAABis6+1aGjxG3M74y5ZAgc961KZyJIoLQL9VDaA83Bz8IAAAAAAAAAZAAAAAAAAAABAAAAAAAAAAgAAAAAAAAAF0h255wAAAAAAAAAAgAAAAMABRgKAAAAAAAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogAAABdIdugAAAUYCgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEABRgMAAAAAAAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogAAABdIduecAAUYCgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAgAAAAMABRgMAAAAAAAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogAAABdIduecAAUYCgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEABRgMAAAAAAAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogAAABdIduecAAUYCgAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAFGAwAAAAAaGx0UwAAAAAAAAABAAAABAAAAAMABRgMAAAAAAAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogAAABdIduecAAUYCgAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAFGAwAAAAAaGx0UwAAAAAAAAACAAAAAAAAAAC89KQWVfRPKcU8kg0pkFBGjf9DUet91QIVi9n9x/5sogAAAAMABRgAAAAAAAAAAABKBB+2UBMP/abwcm/M1TXO+/JQWhPwkalgqizKmXyRIQm+rlsy0phoAAAAXwAAAAIAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAAxmkAAAAAaFbWLgAAAAAAAAABAAUYDAAAAAAAAAAASgQftlATD/2m8HJvzNU1zvvyUFoT8JGpYKosypl8kSEJvq5ye0mABAAAAF8AAAACAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAAAAMZpAAAAAGhW1i4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPTNloAAAAAAAAAAA=",
			txIndex:            0,
			opType:             xdr.OperationTypeAccountMerge,
			networkPassphrase:  network.TestNetworkPassphrase,
			wantErrContains:    ErrNotSorobanOperation.Error(),
		},
		{
			name:               "InvokeHostFunction/InvokeContract",
			ledgerCloseMetaXDR: "",
			txIndex:            0,
			opType:             xdr.OperationTypeInvokeHostFunction,
			invokeOpSubtype:    xdr.HostFunctionTypeHostFunctionTypeInvokeContract,
			networkPassphrase:  network.TestNetworkPassphrase,
			wantContractID:     "CBN2MBW4AFEHXMLE5ADTAWFOQKEHBYTVO62AZ7DTQONACYE26VFPHKVA",
		},
		{
			name:               "InvokeHostFunction/CreateContractV2",
			ledgerCloseMetaXDR: "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",
			txIndex:            1,
			opType:             xdr.OperationTypeInvokeHostFunction,
			invokeOpSubtype:    xdr.HostFunctionTypeHostFunctionTypeCreateContractV2,
			networkPassphrase:  network.TestNetworkPassphrase,
			wantContractID:     "CCSZ54OHAF6BBBFVKHGA6WFWNQLEBXBVO3JYY4BPRYQTXOYJ7LI3QE4D",
		},
		{
			name:               "ExtendFootprintTtl",
			ledgerCloseMetaXDR: "AAAAAQAAAADExwNYwZmxceIlqdjew8ZM4Ea2OmU3ekyB1E80/hjTEAAAABZxhZ7YUrVRbsdnIH+A8Lc3eFSsUFJLYgiHNbqspRfYzXdNwiojRBv1Mxh6hHM5+wknY/oyVI3B1nfDlIKneLEhAAAAAGhsUD0AAAAAAAAAAQAAAACoJM0YvJ11Bk0pmltbrKQ7w6ovMmk4FT2ML5u1y23wMwAAAEDFB/dEAXtiOVMbAz7gA9CNmqxRg0l+7ozgHw+PwLbSb6l6YAZmgCCmzolM/x8oTYs4V4MjBguNgN+LsUzSo8IBfJy1ZwIAVIMnfKLoQ3qdr89sUUX+tewm1nP04vZMYQleiFL3Q2swGoear5qIqoR/lYmffZItegFqftL1vsVsewAFENYN4Lazp2QAAAAAAUWLshmPAAAAAAAAAAAAAAf+AAAAZABMS0AAAADID1z8W8mKuSC3kfkI5jCAjLwAkpqSSNILeDu7LL/CSbck7NfAZiW98Fu+FbQGjrHEhcTO4QnVdJqgNB53cpiHiBQNyHo9RHe6cli/6fXvI0stZzKGhuloxfOC8sMfrOl5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxhZ7YUrVRbsdnIH+A8Lc3eFSsUFJLYgiHNbqspRfYzQAAAAIAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAZAAAAAEAAAACAAAAAPB/aPbse/yUSSf/DesVoBsHq0DnvbDYtVAQxDW2rX0CAADeFQADOPQAAAAKAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAZAAAAAAAFGJEAAAABAAAAAAAAAAEAAAAGAAAAAUSy6uPfYytNDuHqVeTcsaAA86Lj5sLbJYcjvO2FrFW1AAAACENPVU5URVIxAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAADdsQAAAAG2rX0CAAAAQLiusUVPGZJfz7pH5O0J5P819NLZVTTjICbkm41IOM4uC8f/Q1Uf0HUqG9Oylr2jbVi3haEHDu75N/7E8iNTng0AAAAB5EPpITA8tT7KaFKOhDhFJ8zD8ocJ0iclphnNg6+Z2toAAAAAAAA9XwAAAAAAAAABAAAAAAAAABkAAAAAAAAAAAAAAAIAAAADAAUQuwAAAAAAAAAA8H9o9ux7/JRJJ/8N6xWgGwerQOe9sNi1UBDENbatfQIAAAAXQIXRuAADOPQAAAAJAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAAABRC7AAAAAGhsT7YAAAAAAAAAAQAFENYAAAAAAAAAAPB/aPbse/yUSSf/DesVoBsHq0DnvbDYtVAQxDW2rX0CAAAAF0CE86MAAzj0AAAACQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAAUQuwAAAABobE+2AAAAAAAAAAMAAAAAAAAAAgAAAAMABRDWAAAAAAAAAADwf2j27Hv8lEkn/w3rFaAbB6tA572w2LVQEMQ1tq19AgAAABdAhPOjAAM49AAAAAkAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAFELsAAAAAaGxPtgAAAAAAAAABAAUQ1gAAAAAAAAAA8H9o9ux7/JRJJ/8N6xWgGwerQOe9sNi1UBDENbatfQIAAAAXQITzowADOPQAAAAKAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAAABRDWAAAAAGhsUD0AAAAAAAAAAQAAAAAAAAACAAAAAwAFENYAAAAAAAAAAPB/aPbse/yUSSf/DesVoBsHq0DnvbDYtVAQxDW2rX0CAAAAF0CE86MAAzj0AAAACgAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAAUQ1gAAAABobFA9AAAAAAAAAAEABRDWAAAAAAAAAADwf2j27Hv8lEkn/w3rFaAbB6tA572w2LVQEMQ1tq19AgAAABdAhZRZAAM49AAAAAoAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAFENYAAAAAaGxQPQAAAAAAAAABAAAAAQAAAAAAAAAAAAA8+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0YHigAAAAAAAAAA",
			txIndex:            0,
			opType:             xdr.OperationTypeExtendFootprintTtl,
			invokeOpSubtype:    xdr.HostFunctionTypeHostFunctionTypeCreateContractV2,
			networkPassphrase:  network.TestNetworkPassphrase,
			wantContractID:     "CBCLF2XD35RSWTIO4HVFLZG4WGQAB45C4PTMFWZFQ4R3Z3MFVRK3KDNV",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			var lcm xdr.LedgerCloseMeta
			require.NoError(t, xdr.SafeUnmarshalBase64(tc.ledgerCloseMetaXDR, &lcm))
			ledgerTxReader, err := ingest.NewLedgerTransactionReaderFromLedgerCloseMeta(network.TestNetworkPassphrase, lcm)
			require.NoError(t, err)

			var ingestTx ingest.LedgerTransaction
			for txIndex := 0; txIndex <= tc.txIndex; txIndex++ {
				ingestTx, err = ledgerTxReader.Read()
				require.NoError(t, err)
			}

			require.Equal(t, uint32(1), ingestTx.Envelope.OperationsCount(), "tx should have only one operation")
			op := operation_processor.TransactionOperationWrapper{
				Index:          0,
				Transaction:    ingestTx,
				Operation:      ingestTx.Envelope.Operations()[0],
				LedgerSequence: ingestTx.Ledger.LedgerSequence(),
				Network:        tc.networkPassphrase,
			}

			// Verify operation type and subtype
			require.Equal(t, tc.opType, op.OperationType())
			if op.OperationType() == xdr.OperationTypeInvokeHostFunction {
				require.Equal(t, tc.invokeOpSubtype, op.Operation.Body.MustInvokeHostFunctionOp().HostFunction.Type)
			}

			// Test contract ID extraction
			contractID, err := contractIDForSorobanOperation(op)
			if tc.wantErrContains != "" {
				assert.ErrorContains(t, err, tc.wantErrContains)
				assert.Empty(t, contractID)
			} else {
				require.NoError(t, err)
				require.Equal(t, tc.wantContractID, contractID)
			}
		})
	}
}

func Test_scAddressesForScVal(t *testing.T) {
	// GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P
	accountID1 := xdr.MustAddress("GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P")
	scAddressAccount1 := xdr.ScAddress{
		Type:      xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: &accountID1,
	}

	// GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U
	accountID2 := xdr.MustAddress("GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U")
	scAddressAccount2 := xdr.ScAddress{
		Type:      xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: &accountID2,
	}
	// GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U re-encoded as a C-account
	accountID2Bytes := strkey.MustDecode(strkey.VersionByteAccountID, accountID2.Address())
	scAddressContract2AsAccountID := xdr.ScAddress{
		Type:       xdr.ScAddressTypeScAddressTypeContract,
		ContractId: utils.PointOf(xdr.Hash(accountID2Bytes)),
	}

	// CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC
	decodedContractID, err := strkey.Decode(strkey.VersionByteContract, "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC")
	require.NoError(t, err)
	contractID1 := xdr.Hash(decodedContractID)
	scAddressContract1 := xdr.ScAddress{
		Type:       xdr.ScAddressTypeScAddressTypeContract,
		ContractId: &contractID1,
	}
	// CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC re-encoded as a G-account
	contractID1AsAccountID, err := strkey.Encode(strkey.VersionByteAccountID, contractID1[:])
	require.NoError(t, err)
	scAddressContract1AsAccountID := xdr.ScAddress{
		Type:      xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: utils.PointOf(xdr.MustAddress(contractID1AsAccountID)),
	}

	// CDSMYK7ADPT32KBXPXWSOWMBANDDFG76IVB4HWHOE2SA3DPAKXA4C6ZR
	decodedContractID, err = strkey.Decode(strkey.VersionByteContract, "CDSMYK7ADPT32KBXPXWSOWMBANDDFG76IVB4HWHOE2SA3DPAKXA4C6ZR")
	require.NoError(t, err)
	contractID2 := xdr.Hash(decodedContractID)
	scAddressContract2 := xdr.ScAddress{
		Type:       xdr.ScAddressTypeScAddressTypeContract,
		ContractId: &contractID2,
	}

	testCases := []struct {
		name          string
		scVal         xdr.ScVal
		wantAddresses set.Set[xdr.ScAddress]
	}{
		{
			name:          "🟡unsupported_scv_type",
			scVal:         xdr.ScVal{Type: xdr.ScValTypeScvI32, I32: utils.PointOf(xdr.Int32(1))},
			wantAddresses: set.NewSet[xdr.ScAddress](),
		},
		{
			name: "🟢scv_address",
			scVal: xdr.ScVal{
				Type:    xdr.ScValTypeScvAddress,
				Address: &scAddressAccount1,
			},
			wantAddresses: set.NewSet(scAddressAccount1),
		},
		{
			name: "🟢scv_vec_with_addresses",
			scVal: func() xdr.ScVal {
				vec := xdr.ScVec{
					xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressAccount1},
					xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressAccount2},
					xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressContract1},
					xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressContract2},
				}
				vecPtr := &vec
				return xdr.ScVal{Type: xdr.ScValTypeScvVec, Vec: &vecPtr}
			}(),
			wantAddresses: set.NewSet(scAddressAccount1, scAddressAccount2, scAddressContract1, scAddressContract2),
		},
		{
			name: "🟢scv_map_with_addresses",
			scVal: func() xdr.ScVal {
				scMap := utils.PointOf(xdr.ScMap{
					xdr.ScMapEntry{
						Key: xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressAccount1},
						Val: xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressContract1},
					},
				})
				return xdr.ScVal{Type: xdr.ScValTypeScvMap, Map: &scMap}
			}(),
			wantAddresses: set.NewSet(scAddressAccount1, scAddressContract1),
		},
		{
			name: "🟢scv_bytes_as_contract_id",
			scVal: func() xdr.ScVal {
				scb := xdr.ScBytes(contractID1[:])
				return xdr.ScVal{Type: xdr.ScValTypeScvBytes, Bytes: &scb}
			}(),
			wantAddresses: set.NewSet(scAddressContract1, scAddressContract1AsAccountID),
		},
		{
			name: "🟢scv_bytes_as_account_id",
			scVal: func() xdr.ScVal {
				decoded, err := strkey.Decode(strkey.VersionByteAccountID, accountID2.Address())
				require.NoError(t, err)
				scb := xdr.ScBytes(decoded)
				return xdr.ScVal{Type: xdr.ScValTypeScvBytes, Bytes: &scb}
			}(),
			wantAddresses: set.NewSet(scAddressAccount2, scAddressContract2AsAccountID),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result := scAddressesForScVal(tc.scVal)
			assert.Equal(t, tc.wantAddresses.Cardinality(), result.Cardinality())
			assert.ElementsMatch(t, tc.wantAddresses.ToSlice(), result.ToSlice())
		})
	}
}

func Test_participantsForScVal(t *testing.T) {
	// GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P
	accountID1 := xdr.MustAddress("GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P")
	scAddressAccount1 := xdr.ScAddress{
		Type:      xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: &accountID1,
	}

	// CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC
	decodedContractID, err := strkey.Decode(strkey.VersionByteContract, "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC")
	require.NoError(t, err)
	contractID1 := xdr.Hash(decodedContractID)
	scAddressContract1 := xdr.ScAddress{
		Type:       xdr.ScAddressTypeScAddressTypeContract,
		ContractId: &contractID1,
	}

	testCases := []struct {
		name          string
		scVal         xdr.ScVal
		wantAddresses set.Set[string]
	}{
		{
			name:          "🟡unsupported_scv_type",
			scVal:         xdr.ScVal{Type: xdr.ScValTypeScvI32, I32: utils.PointOf(xdr.Int32(1))},
			wantAddresses: set.NewSet[string](),
		},
		{
			name: "🟢scv_address",
			scVal: xdr.ScVal{
				Type:    xdr.ScValTypeScvAddress,
				Address: &scAddressAccount1,
			},
			wantAddresses: set.NewSet("GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P"),
		},
		{
			name: "🟢scv_map_with_address_and_vector",
			scVal: func() xdr.ScVal {
				vec := &xdr.ScVec{
					xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressAccount1},
				}
				scMap := utils.PointOf(xdr.ScMap{
					xdr.ScMapEntry{
						Key: xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &scAddressContract1},
						Val: xdr.ScVal{Type: xdr.ScValTypeScvVec, Vec: utils.PointOf(vec)},
					},
				})
				return xdr.ScVal{Type: xdr.ScValTypeScvMap, Map: &scMap}
			}(),
			wantAddresses: set.NewSet("GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P", "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result, err := participantsForScVal(tc.scVal)
			require.NoError(t, err)
			assert.Equal(t, tc.wantAddresses.Cardinality(), result.Cardinality())
			assert.ElementsMatch(t, tc.wantAddresses.ToSlice(), result.ToSlice())
		})
	}
}

func Test_participantsForAuthEntries(t *testing.T) {
	// GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P
	accountID1 := xdr.MustAddress("GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P")
	scAddressAccount1 := xdr.ScAddress{
		Type:      xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: &accountID1,
	}

	// CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC
	decodedContractID, err := strkey.Decode(strkey.VersionByteContract, "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC")
	require.NoError(t, err)
	contractID1 := xdr.Hash(decodedContractID)
	scAddressContract1 := xdr.ScAddress{
		Type:       xdr.ScAddressTypeScAddressTypeContract,
		ContractId: &contractID1,
	}

	// GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U
	accountID2 := xdr.MustAddress("GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U")
	scAddressAccount2 := xdr.ScAddress{
		Type:      xdr.ScAddressTypeScAddressTypeAccount,
		AccountId: &accountID2,
	}

	testCases := []struct {
		name            string
		authEntries     []xdr.SorobanAuthorizationEntry
		expected        []string
		wantErrContains string
	}{
		{
			name:        "🟢empty_auth_entries",
			authEntries: []xdr.SorobanAuthorizationEntry{},
			expected:    []string{},
		},
		{
			name: "🟢single_account_auth_entry",
			authEntries: []xdr.SorobanAuthorizationEntry{
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressAccount1,
						}),
					},
				},
			},
			expected: []string{"GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P"},
		},
		{
			name: "🟢single_contract_auth_entry",
			authEntries: []xdr.SorobanAuthorizationEntry{
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressContract1,
						}),
					},
				},
			},
			expected: []string{"CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"},
		},
		{
			name: "🟢multiple_auth_entries",
			authEntries: []xdr.SorobanAuthorizationEntry{
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressAccount1,
						}),
					},
				},
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressContract1,
						}),
					},
				},
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressAccount2,
						}),
					},
				},
			},
			expected: []string{
				"GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P",
				"CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC",
				"GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U",
			},
		},
		{
			name: "🟡unsupported_credentials_type_should_be_ignored",
			authEntries: []xdr.SorobanAuthorizationEntry{
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsSourceAccount,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressContract1,
						}),
					},
				},
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressAccount2,
						}),
					},
				},
			},
			expected: []string{"GBWAH7AOBZYAYLT76Z7MQDDRRJCCERRVRSCJ4GAEGV2S5W474ZLEOH4U"},
		},
		{
			name: "🟢duplicate_addresses_should_be_deduplicated",
			authEntries: []xdr.SorobanAuthorizationEntry{
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{
							Address: scAddressAccount1,
						}),
					},
				},
				{
					Credentials: xdr.SorobanCredentials{
						Type: xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
						Address: utils.PointOf(xdr.SorobanAddressCredentials{ // Duplicate
							Address: scAddressAccount1,
						}),
					},
				},
			},
			expected: []string{"GDYH62HW5R57ZFCJE77Q32YVUANQPK2A4663BWFVKAIMINNWVV6QEI5P"},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			participants, err := participantsForAuthEntries(tc.authEntries)

			if tc.wantErrContains != "" {
				assert.Error(t, err)
				assert.ErrorContains(t, err, tc.wantErrContains)
				assert.Empty(t, participants)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, len(tc.expected), participants.Cardinality())
				for _, expectedParticipant := range tc.expected {
					assert.True(t, participants.Contains(expectedParticipant))
				}
			}
		})
	}
}

func Test_participantsForSorobanOp(t *testing.T) {
	const (
		accountID1      = "GAGWN4445WLODCXT7RUZXJLQK5XWX4GICXDOAAZZGK2N3BR67RIIVWJ7"
		accountID2      = "GBKV7KN5K2CJA7TC5AUQNI76JBXHLMQSHT426JEAR3TPVKNSMKMG4RZN"
		accountID3      = "GCTNXY3EZFV2BL4CWHIRSBJVBEYFXANMIDJEVITS66YXOQEF3PL7LHXQ"
		contractID1     = "CBN2MBW4AFEHXMLE5ADTAWFOQKEHBYTVO62AZ7DTQONACYE26VFPHKVA"
		xlmSACContracID = "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"
	)

	// Helper functions
	makeScAddress := func(accountID string) xdr.ScAddress {
		return xdr.ScAddress{
			Type:      xdr.ScAddressTypeScAddressTypeAccount,
			AccountId: utils.PointOf(xdr.MustAddress(accountID)),
		}
	}

	makeScContract := func(contractID string) xdr.ScAddress {
		decoded, err := strkey.Decode(strkey.VersionByteContract, contractID)
		require.NoError(t, err)
		return xdr.ScAddress{
			Type:       xdr.ScAddressTypeScAddressTypeContract,
			ContractId: utils.PointOf(xdr.Hash(decoded)),
		}
	}

	makeBasicSorobanOp := func(opType xdr.OperationType, txSourceAccount string) operation_processor.TransactionOperationWrapper {
		return operation_processor.TransactionOperationWrapper{
			Network:      network.TestNetworkPassphrase,
			LedgerClosed: time.Now(),
			Operation: xdr.Operation{
				Body: xdr.OperationBody{Type: opType},
			},
			Transaction: ingest.LedgerTransaction{
				Envelope: xdr.TransactionEnvelope{
					Type: xdr.EnvelopeTypeEnvelopeTypeTx,
					V1: &xdr.TransactionV1Envelope{
						Tx: xdr.Transaction{
							SourceAccount: xdr.MustMuxedAddress(txSourceAccount),
							Ext: xdr.TransactionExt{
								V:           int32(1),
								SorobanData: &xdr.SorobanTransactionData{},
							},
						},
					},
				},
			},
		}
	}

	type FootprintType int
	const (
		FootprintTypeReadOnly FootprintType = iota
		FootprintTypeReadWrite
	)

	makeFootprintOp := func(opType xdr.OperationType, txSourceAccount, opSourceAccount string, contract xdr.ScAddress, footprintType FootprintType) operation_processor.TransactionOperationWrapper {
		op := makeBasicSorobanOp(opType, txSourceAccount)
		if opSourceAccount != "" {
			op.Operation.SourceAccount = utils.PointOf(xdr.MustMuxedAddress(opSourceAccount))
		}

		ledgerKeys := []xdr.LedgerKey{{
			Type:         xdr.LedgerEntryTypeContractData,
			ContractData: &xdr.LedgerKeyContractData{Contract: contract},
		}}

		switch footprintType {
		case FootprintTypeReadOnly:
			op.Transaction.Envelope.V1.Tx.Ext.SorobanData.Resources.Footprint.ReadOnly = ledgerKeys
		case FootprintTypeReadWrite:
			op.Transaction.Envelope.V1.Tx.Ext.SorobanData.Resources.Footprint.ReadWrite = ledgerKeys
		}

		return op
	}

	makeFeeBumpOp := func(feeBumpSourceAccount string, baseOp operation_processor.TransactionOperationWrapper) operation_processor.TransactionOperationWrapper {
		op := baseOp
		op.Transaction.Envelope.V1 = &xdr.TransactionV1Envelope{}
		op.Transaction.Envelope.Type = xdr.EnvelopeTypeEnvelopeTypeTxFeeBump
		op.Transaction.Envelope.FeeBump = &xdr.FeeBumpTransactionEnvelope{
			Tx: xdr.FeeBumpTransaction{
				FeeSource: xdr.MustMuxedAddress(feeBumpSourceAccount),
				InnerTx: xdr.FeeBumpTransactionInnerTx{
					Type: baseOp.Transaction.Envelope.Type,
					V1:   baseOp.Transaction.Envelope.V1,
				},
			},
		}
		return op
	}

	makeCreateContractOp := func(contractType xdr.HostFunctionType, txSourceAccount, deployerAccount string, preimageType xdr.ContractIdPreimageType) operation_processor.TransactionOperationWrapper {
		op := makeBasicSorobanOp(xdr.OperationTypeInvokeHostFunction, txSourceAccount)

		var preimage xdr.ContractIdPreimage
		switch preimageType {
		case xdr.ContractIdPreimageTypeContractIdPreimageFromAsset:
			preimage = xdr.ContractIdPreimage{
				Type:      xdr.ContractIdPreimageTypeContractIdPreimageFromAsset,
				FromAsset: &xdr.Asset{Type: xdr.AssetTypeAssetTypeNative},
			}

		case xdr.ContractIdPreimageTypeContractIdPreimageFromAddress:
			rawAddress, err := strkey.Decode(strkey.VersionByteAccountID, deployerAccount)
			require.NoError(t, err)
			var uint256Val xdr.Uint256
			copy(uint256Val[:], rawAddress)

			preimage = xdr.ContractIdPreimage{
				Type: xdr.ContractIdPreimageTypeContractIdPreimageFromAddress,
				FromAddress: &xdr.ContractIdPreimageFromAddress{
					Address: xdr.ScAddress{
						Type: xdr.ScAddressTypeScAddressTypeAccount,
						AccountId: utils.PointOf(xdr.AccountId{
							Type:    xdr.PublicKeyTypePublicKeyTypeEd25519,
							Ed25519: &uint256Val,
						}),
					},
					Salt: xdr.Uint256{195, 179, 60, 131, 211, 25, 160, 131, 45, 151, 203, 11, 11, 116, 166, 232, 51, 92, 179, 76, 220, 111, 96, 246, 72, 68, 195, 127, 194, 19, 147, 252},
				},
			}
		}

		switch contractType {
		case xdr.HostFunctionTypeHostFunctionTypeCreateContract:
			op.Operation.Body.InvokeHostFunctionOp = &xdr.InvokeHostFunctionOp{
				HostFunction: xdr.HostFunction{
					Type:           contractType,
					CreateContract: &xdr.CreateContractArgs{ContractIdPreimage: preimage},
				},
			}

		case xdr.HostFunctionTypeHostFunctionTypeCreateContractV2:
			op.Operation.Body.InvokeHostFunctionOp = &xdr.InvokeHostFunctionOp{
				HostFunction: xdr.HostFunction{
					Type:             contractType,
					CreateContractV2: &xdr.CreateContractArgsV2{ContractIdPreimage: preimage},
				},
			}

		default:
			require.Fail(t, "unsupported/unimplemented contract type")
		}

		return op
	}

	makeInvokeContractOp := func(sourceAccount string, contract xdr.ScAddress, argAddresses []xdr.ScAddress, authAccounts []xdr.ScAddress) operation_processor.TransactionOperationWrapper {
		op := makeBasicSorobanOp(xdr.OperationTypeInvokeHostFunction, sourceAccount)
		op.Operation.SourceAccount = utils.PointOf(xdr.MustMuxedAddress(sourceAccount))

		var args xdr.ScVec
		for _, arg := range argAddresses {
			args = append(args, xdr.ScVal{Type: xdr.ScValTypeScvAddress, Address: &arg})
		}

		invokeContractArgs := xdr.InvokeContractArgs{
			ContractAddress: contract,
			FunctionName:    xdr.ScSymbol("authorized_fn"),
			Args:            args,
		}

		authEntries := []xdr.SorobanAuthorizationEntry{}
		for _, authAccount := range authAccounts {
			authEntries = append(authEntries, xdr.SorobanAuthorizationEntry{
				Credentials: xdr.SorobanCredentials{
					Type:    xdr.SorobanCredentialsTypeSorobanCredentialsAddress,
					Address: utils.PointOf(xdr.SorobanAddressCredentials{Address: authAccount}),
				},
				RootInvocation: xdr.SorobanAuthorizedInvocation{
					Function: xdr.SorobanAuthorizedFunction{
						Type:       xdr.SorobanAuthorizedFunctionTypeSorobanAuthorizedFunctionTypeContractFn,
						ContractFn: &invokeContractArgs,
					},
					SubInvocations: []xdr.SorobanAuthorizedInvocation{},
				},
			})
		}

		op.Operation.Body.InvokeHostFunctionOp = &xdr.InvokeHostFunctionOp{
			HostFunction: xdr.HostFunction{
				Type:           xdr.HostFunctionTypeHostFunctionTypeInvokeContract,
				InvokeContract: &invokeContractArgs,
			},
			Auth: authEntries,
		}

		return op
	}

	makeUploadWasmOp := func(sourceAccount string) operation_processor.TransactionOperationWrapper {
		op := makeBasicSorobanOp(xdr.OperationTypeInvokeHostFunction, accountID3)
		op.Operation.SourceAccount = utils.PointOf(xdr.MustMuxedAddress(sourceAccount))
		op.Operation.Body.InvokeHostFunctionOp = &xdr.InvokeHostFunctionOp{
			HostFunction: xdr.HostFunction{
				Type: xdr.HostFunctionTypeHostFunctionTypeUploadContractWasm,
				Wasm: &[]byte{1, 2, 3, 4, 5},
			},
		}
		return op
	}

	// Test cases
	testCases := []struct {
		name             string
		op               operation_processor.TransactionOperationWrapper
		wantParticipants set.Set[string]
		wantErrContains  string
	}{
		{
			name: "🔴non_soroban_operation",
			op: operation_processor.TransactionOperationWrapper{
				Network:      network.TestNetworkPassphrase,
				LedgerClosed: time.Now(),
				Operation: xdr.Operation{
					Body: xdr.OperationBody{Type: xdr.OperationTypePayment},
				},
				Transaction: ingest.LedgerTransaction{
					Envelope: xdr.TransactionEnvelope{
						Type: xdr.EnvelopeTypeEnvelopeTypeTx,
						V1: &xdr.TransactionV1Envelope{
							Tx: xdr.Transaction{
								SourceAccount: xdr.MustMuxedAddress(accountID1),
								// No SorobanData - this makes it a non-Soroban transaction
							},
						},
					},
				},
			},
			wantErrContains: ErrNotSorobanOperation.Error(),
		},
		{
			name:             "🟢ExtendFootprintTtl/ReadOnly/tx/tx.SourceAccount",
			op:               makeFootprintOp(xdr.OperationTypeExtendFootprintTtl, accountID1, "", makeScContract(contractID1), FootprintTypeReadOnly),
			wantParticipants: set.NewSet(accountID1, contractID1),
		},
		{
			name:             "🟢ExtendFootprintTtl/ReadOnly/tx/op.SourceAccount",
			op:               makeFootprintOp(xdr.OperationTypeExtendFootprintTtl, accountID1, accountID2, makeScContract(contractID1), FootprintTypeReadOnly),
			wantParticipants: set.NewSet(accountID2, contractID1),
		},
		{
			name:             "🟢RestoreFootprint/ReadWrite/fee_bump_tx/tx.SourceAccount",
			op:               makeFeeBumpOp(accountID3, makeFootprintOp(xdr.OperationTypeExtendFootprintTtl, accountID1, "", makeScContract(contractID1), FootprintTypeReadWrite)),
			wantParticipants: set.NewSet(accountID1, contractID1),
		},
		{
			name:             "🟢InvokeHost/CreateContract/fromAddress/tx/tx.SourceAccount",
			op:               makeCreateContractOp(xdr.HostFunctionTypeHostFunctionTypeCreateContract, accountID3, accountID2, xdr.ContractIdPreimageTypeContractIdPreimageFromAddress),
			wantParticipants: set.NewSet(accountID3, "CBFECUDH6TY6GHBBJS2ASEAXCL2KMBGF46E7A2F42SWMICKG2VDFVPED"),
		},
		{
			name:             "🟢InvokeHost/CreateContractV2/fromAddress/tx/tx.SourceAccount",
			op:               makeCreateContractOp(xdr.HostFunctionTypeHostFunctionTypeCreateContractV2, accountID3, accountID2, xdr.ContractIdPreimageTypeContractIdPreimageFromAddress),
			wantParticipants: set.NewSet(accountID3, "CBFECUDH6TY6GHBBJS2ASEAXCL2KMBGF46E7A2F42SWMICKG2VDFVPED"),
		},
		{
			name:             "🟢InvokeHost/CreateContractV2/fromAsset/tx/tx.SourceAccount",
			op:               makeCreateContractOp(xdr.HostFunctionTypeHostFunctionTypeCreateContractV2, accountID3, "", xdr.ContractIdPreimageTypeContractIdPreimageFromAsset),
			wantParticipants: set.NewSet(accountID3, xlmSACContracID),
		},
		{
			name:             "🟢InvokeHost/InvokeContract/auth/args",
			op:               makeInvokeContractOp(accountID3, makeScContract(contractID1), []xdr.ScAddress{makeScAddress(accountID1), makeScAddress(accountID2)}, []xdr.ScAddress{makeScContract(xlmSACContracID)}),
			wantParticipants: set.NewSet(accountID3, contractID1, accountID1, xlmSACContracID, accountID2),
		},
		{
			name:             "🟢UploadWasm/tx/tx.SourceAccount",
			op:               makeUploadWasmOp(accountID1),
			wantParticipants: set.NewSet(accountID1),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			participants, err := participantsForSorobanOp(tc.op)

			if tc.wantErrContains != "" {
				require.Error(t, err)
				assert.Contains(t, err.Error(), tc.wantErrContains)
			} else {
				require.NoError(t, err)
				assert.Equal(t, tc.wantParticipants, participants)
			}
		})
	}
}
