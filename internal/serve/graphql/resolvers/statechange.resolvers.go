package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
)

// Account is the resolver for the account field.
func (r *allowanceStateChangeResolver) Account(ctx context.Context, obj *types.AllowanceStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *allowanceStateChangeResolver) Operation(ctx context.Context, obj *types.AllowanceStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *allowanceStateChangeResolver) Transaction(ctx context.Context, obj *types.AllowanceStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// SpenderAddress is the resolver for the spenderAddress field.
func (r *allowanceStateChangeResolver) SpenderAddress(ctx context.Context, obj *types.AllowanceStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SpenderAccountID), nil
}

// Account is the resolver for the account field.
func (r *balanceStateChangeResolver) Account(ctx context.Context, obj *types.BalanceStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *balanceStateChangeResolver) Operation(ctx context.Context, obj *types.BalanceStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *balanceStateChangeResolver) Transaction(ctx context.Context, obj *types.BalanceStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// TokenID is the resolver for the tokenId field.
func (r *balanceStateChangeResolver) TokenID(ctx context.Context, obj *types.BalanceStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.TokenID), nil
}

// Amount is the resolver for the amount field.
func (r *balanceStateChangeResolver) Amount(ctx context.Context, obj *types.BalanceStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.Amount), nil
}

// ClaimableBalanceID is the resolver for the claimableBalanceId field.
func (r *balanceStateChangeResolver) ClaimableBalanceID(ctx context.Context, obj *types.BalanceStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.ClaimableBalanceID), nil
}

// LiquidityPoolID is the resolver for the liquidityPoolId field.
func (r *balanceStateChangeResolver) LiquidityPoolID(ctx context.Context, obj *types.BalanceStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.LiquidityPoolID), nil
}

// Account is the resolver for the account field.
func (r *flagsStateChangeResolver) Account(ctx context.Context, obj *types.FlagsStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *flagsStateChangeResolver) Operation(ctx context.Context, obj *types.FlagsStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *flagsStateChangeResolver) Transaction(ctx context.Context, obj *types.FlagsStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// Flags is the resolver for the flags field.
func (r *flagsStateChangeResolver) Flags(ctx context.Context, obj *types.FlagsStateChangeModel) ([]string, error) {
	return r.resolveStringArray([]string(obj.Flags)), nil
}

// Account is the resolver for the account field.
func (r *liabilityStateChangeResolver) Account(ctx context.Context, obj *types.LiabilityStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *liabilityStateChangeResolver) Operation(ctx context.Context, obj *types.LiabilityStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *liabilityStateChangeResolver) Transaction(ctx context.Context, obj *types.LiabilityStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// TokenID is the resolver for the tokenId field.
func (r *liabilityStateChangeResolver) TokenID(ctx context.Context, obj *types.LiabilityStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.TokenID), nil
}

// Amount is the resolver for the amount field.
func (r *liabilityStateChangeResolver) Amount(ctx context.Context, obj *types.LiabilityStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.Amount), nil
}

// OfferID is the resolver for the offerId field.
func (r *liabilityStateChangeResolver) OfferID(ctx context.Context, obj *types.LiabilityStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.OfferID), nil
}

// Account is the resolver for the account field.
func (r *metadataStateChangeResolver) Account(ctx context.Context, obj *types.MetadataStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *metadataStateChangeResolver) Operation(ctx context.Context, obj *types.MetadataStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *metadataStateChangeResolver) Transaction(ctx context.Context, obj *types.MetadataStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// KeyValue is the resolver for the keyValue field.
func (r *metadataStateChangeResolver) KeyValue(ctx context.Context, obj *types.MetadataStateChangeModel) (string, error) {
	return r.resolveRequiredJSONBField(obj.KeyValue)
}

// Account is the resolver for the account field.
func (r *signerStateChangeResolver) Account(ctx context.Context, obj *types.SignerStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *signerStateChangeResolver) Operation(ctx context.Context, obj *types.SignerStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *signerStateChangeResolver) Transaction(ctx context.Context, obj *types.SignerStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// SignerAddress is the resolver for the signerAddress field.
func (r *signerStateChangeResolver) SignerAddress(ctx context.Context, obj *types.SignerStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SignerAccountID), nil
}

// SignerWeights is the resolver for the signerWeights field.
func (r *signerStateChangeResolver) SignerWeights(ctx context.Context, obj *types.SignerStateChangeModel) (*string, error) {
	return r.resolveJSONBField(obj.SignerWeights)
}

// Account is the resolver for the account field.
func (r *signerThresholdsStateChangeResolver) Account(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *signerThresholdsStateChangeResolver) Operation(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *signerThresholdsStateChangeResolver) Transaction(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// Thresholds is the resolver for the thresholds field.
func (r *signerThresholdsStateChangeResolver) Thresholds(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (string, error) {
	return r.resolveRequiredJSONBField(obj.Thresholds)
}

// Account is the resolver for the account field.
func (r *sponsorshipStateChangeResolver) Account(ctx context.Context, obj *types.SponsorshipStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *sponsorshipStateChangeResolver) Operation(ctx context.Context, obj *types.SponsorshipStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *sponsorshipStateChangeResolver) Transaction(ctx context.Context, obj *types.SponsorshipStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// SponsoredAddress is the resolver for the sponsoredAddress field.
func (r *sponsorshipStateChangeResolver) SponsoredAddress(ctx context.Context, obj *types.SponsorshipStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SponsoredAccountID), nil
}

// SponsorAddress is the resolver for the sponsorAddress field.
func (r *sponsorshipStateChangeResolver) SponsorAddress(ctx context.Context, obj *types.SponsorshipStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SponsorAccountID), nil
}

// AllowanceStateChange returns graphql1.AllowanceStateChangeResolver implementation.
func (r *Resolver) AllowanceStateChange() graphql1.AllowanceStateChangeResolver {
	return &allowanceStateChangeResolver{r}
}

// BalanceStateChange returns graphql1.BalanceStateChangeResolver implementation.
func (r *Resolver) BalanceStateChange() graphql1.BalanceStateChangeResolver {
	return &balanceStateChangeResolver{r}
}

// FlagsStateChange returns graphql1.FlagsStateChangeResolver implementation.
func (r *Resolver) FlagsStateChange() graphql1.FlagsStateChangeResolver {
	return &flagsStateChangeResolver{r}
}

// LiabilityStateChange returns graphql1.LiabilityStateChangeResolver implementation.
func (r *Resolver) LiabilityStateChange() graphql1.LiabilityStateChangeResolver {
	return &liabilityStateChangeResolver{r}
}

// MetadataStateChange returns graphql1.MetadataStateChangeResolver implementation.
func (r *Resolver) MetadataStateChange() graphql1.MetadataStateChangeResolver {
	return &metadataStateChangeResolver{r}
}

// SignerStateChange returns graphql1.SignerStateChangeResolver implementation.
func (r *Resolver) SignerStateChange() graphql1.SignerStateChangeResolver {
	return &signerStateChangeResolver{r}
}

// SignerThresholdsStateChange returns graphql1.SignerThresholdsStateChangeResolver implementation.
func (r *Resolver) SignerThresholdsStateChange() graphql1.SignerThresholdsStateChangeResolver {
	return &signerThresholdsStateChangeResolver{r}
}

// SponsorshipStateChange returns graphql1.SponsorshipStateChangeResolver implementation.
func (r *Resolver) SponsorshipStateChange() graphql1.SponsorshipStateChangeResolver {
	return &sponsorshipStateChangeResolver{r}
}

type (
	allowanceStateChangeResolver        struct{ *Resolver }
	balanceStateChangeResolver          struct{ *Resolver }
	flagsStateChangeResolver            struct{ *Resolver }
	liabilityStateChangeResolver        struct{ *Resolver }
	metadataStateChangeResolver         struct{ *Resolver }
	signerStateChangeResolver           struct{ *Resolver }
	signerThresholdsStateChangeResolver struct{ *Resolver }
	sponsorshipStateChangeResolver      struct{ *Resolver }
)
