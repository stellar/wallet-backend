package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
)

// Type is the resolver for the type field.
func (r *accountChangeResolver) Type(ctx context.Context, obj *types.AccountStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *accountChangeResolver) Reason(ctx context.Context, obj *types.AccountStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *accountChangeResolver) Account(ctx context.Context, obj *types.AccountStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *accountChangeResolver) Operation(ctx context.Context, obj *types.AccountStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *accountChangeResolver) Transaction(ctx context.Context, obj *types.AccountStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// TokenID is the resolver for the tokenId field.
func (r *accountChangeResolver) TokenID(ctx context.Context, obj *types.AccountStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.TokenID), nil
}

// Amount is the resolver for the amount field.
func (r *accountChangeResolver) Amount(ctx context.Context, obj *types.AccountStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.Amount), nil
}

// Type is the resolver for the type field.
func (r *balanceAuthorizationChangeResolver) Type(ctx context.Context, obj *types.BalanceAuthorizationStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *balanceAuthorizationChangeResolver) Reason(ctx context.Context, obj *types.BalanceAuthorizationStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *balanceAuthorizationChangeResolver) Account(ctx context.Context, obj *types.BalanceAuthorizationStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *balanceAuthorizationChangeResolver) Operation(ctx context.Context, obj *types.BalanceAuthorizationStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *balanceAuthorizationChangeResolver) Transaction(ctx context.Context, obj *types.BalanceAuthorizationStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// Flags is the resolver for the flags field.
func (r *balanceAuthorizationChangeResolver) Flags(ctx context.Context, obj *types.BalanceAuthorizationStateChangeModel) ([]string, error) {
	return obj.Flags, nil
}

// Type is the resolver for the type field.
func (r *flagsChangeResolver) Type(ctx context.Context, obj *types.FlagsStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *flagsChangeResolver) Reason(ctx context.Context, obj *types.FlagsStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *flagsChangeResolver) Account(ctx context.Context, obj *types.FlagsStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *flagsChangeResolver) Operation(ctx context.Context, obj *types.FlagsStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *flagsChangeResolver) Transaction(ctx context.Context, obj *types.FlagsStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// Flags is the resolver for the flags field.
func (r *flagsChangeResolver) Flags(ctx context.Context, obj *types.FlagsStateChangeModel) ([]string, error) {
	return obj.Flags, nil
}

// Type is the resolver for the type field.
func (r *metadataChangeResolver) Type(ctx context.Context, obj *types.MetadataStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *metadataChangeResolver) Reason(ctx context.Context, obj *types.MetadataStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *metadataChangeResolver) Account(ctx context.Context, obj *types.MetadataStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *metadataChangeResolver) Operation(ctx context.Context, obj *types.MetadataStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *metadataChangeResolver) Transaction(ctx context.Context, obj *types.MetadataStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// KeyValue is the resolver for the keyValue field.
func (r *metadataChangeResolver) KeyValue(ctx context.Context, obj *types.MetadataStateChangeModel) (string, error) {
	return r.resolveRequiredJSONBField(obj.KeyValue)
}

// Type is the resolver for the type field.
func (r *reservesChangeResolver) Type(ctx context.Context, obj *types.ReservesStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *reservesChangeResolver) Reason(ctx context.Context, obj *types.ReservesStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *reservesChangeResolver) Account(ctx context.Context, obj *types.ReservesStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *reservesChangeResolver) Operation(ctx context.Context, obj *types.ReservesStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *reservesChangeResolver) Transaction(ctx context.Context, obj *types.ReservesStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// SponsoredAddress is the resolver for the sponsoredAddress field.
func (r *reservesChangeResolver) SponsoredAddress(ctx context.Context, obj *types.ReservesStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SponsoredAccountID), nil
}

// SponsorAddress is the resolver for the sponsorAddress field.
func (r *reservesChangeResolver) SponsorAddress(ctx context.Context, obj *types.ReservesStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SponsorAccountID), nil
}

// Type is the resolver for the type field.
func (r *signerChangeResolver) Type(ctx context.Context, obj *types.SignerStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *signerChangeResolver) Reason(ctx context.Context, obj *types.SignerStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *signerChangeResolver) Account(ctx context.Context, obj *types.SignerStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *signerChangeResolver) Operation(ctx context.Context, obj *types.SignerStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *signerChangeResolver) Transaction(ctx context.Context, obj *types.SignerStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// SignerAddress is the resolver for the signerAddress field.
func (r *signerChangeResolver) SignerAddress(ctx context.Context, obj *types.SignerStateChangeModel) (*string, error) {
	return r.resolveNullableString(obj.SignerAccountID), nil
}

// SignerWeights is the resolver for the signerWeights field.
func (r *signerChangeResolver) SignerWeights(ctx context.Context, obj *types.SignerStateChangeModel) (*string, error) {
	return r.resolveJSONBField(obj.SignerWeights)
}

// Type is the resolver for the type field.
func (r *signerThresholdsChangeResolver) Type(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *signerThresholdsChangeResolver) Reason(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *signerThresholdsChangeResolver) Account(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *signerThresholdsChangeResolver) Operation(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *signerThresholdsChangeResolver) Transaction(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// Thresholds is the resolver for the thresholds field.
func (r *signerThresholdsChangeResolver) Thresholds(ctx context.Context, obj *types.SignerThresholdsStateChangeModel) (string, error) {
	return r.resolveRequiredJSONBField(obj.Thresholds)
}

// Type is the resolver for the type field.
func (r *standardBalanceChangeResolver) Type(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *standardBalanceChangeResolver) Reason(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *standardBalanceChangeResolver) Account(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *standardBalanceChangeResolver) Operation(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *standardBalanceChangeResolver) Transaction(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// TokenID is the resolver for the tokenId field.
func (r *standardBalanceChangeResolver) TokenID(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.TokenID), nil
}

// Amount is the resolver for the amount field.
func (r *standardBalanceChangeResolver) Amount(ctx context.Context, obj *types.StandardBalanceStateChangeModel) (string, error) {
	return r.resolveRequiredString(obj.Amount), nil
}

// Type is the resolver for the type field.
func (r *trustlineChangeResolver) Type(ctx context.Context, obj *types.TrustlineStateChangeModel) (types.StateChangeCategory, error) {
	return obj.StateChangeCategory, nil
}

// Reason is the resolver for the reason field.
func (r *trustlineChangeResolver) Reason(ctx context.Context, obj *types.TrustlineStateChangeModel) (types.StateChangeReason, error) {
	return *obj.StateChangeReason, nil
}

// Account is the resolver for the account field.
func (r *trustlineChangeResolver) Account(ctx context.Context, obj *types.TrustlineStateChangeModel) (*types.Account, error) {
	return r.resolveStateChangeAccount(ctx, obj.ToID, obj.StateChangeOrder)
}

// Operation is the resolver for the operation field.
func (r *trustlineChangeResolver) Operation(ctx context.Context, obj *types.TrustlineStateChangeModel) (*types.Operation, error) {
	return r.resolveStateChangeOperation(ctx, obj.ToID, obj.StateChangeOrder)
}

// Transaction is the resolver for the transaction field.
func (r *trustlineChangeResolver) Transaction(ctx context.Context, obj *types.TrustlineStateChangeModel) (*types.Transaction, error) {
	return r.resolveStateChangeTransaction(ctx, obj.ToID, obj.StateChangeOrder)
}

// Limit is the resolver for the limit field.
func (r *trustlineChangeResolver) Limit(ctx context.Context, obj *types.TrustlineStateChangeModel) (string, error) {
	return r.resolveRequiredJSONBField(obj.TrustlineLimit)
}

// AccountChange returns graphql1.AccountChangeResolver implementation.
func (r *Resolver) AccountChange() graphql1.AccountChangeResolver { return &accountChangeResolver{r} }

// BalanceAuthorizationChange returns graphql1.BalanceAuthorizationChangeResolver implementation.
func (r *Resolver) BalanceAuthorizationChange() graphql1.BalanceAuthorizationChangeResolver {
	return &balanceAuthorizationChangeResolver{r}
}

// FlagsChange returns graphql1.FlagsChangeResolver implementation.
func (r *Resolver) FlagsChange() graphql1.FlagsChangeResolver { return &flagsChangeResolver{r} }

// MetadataChange returns graphql1.MetadataChangeResolver implementation.
func (r *Resolver) MetadataChange() graphql1.MetadataChangeResolver {
	return &metadataChangeResolver{r}
}

// ReservesChange returns graphql1.ReservesChangeResolver implementation.
func (r *Resolver) ReservesChange() graphql1.ReservesChangeResolver {
	return &reservesChangeResolver{r}
}

// SignerChange returns graphql1.SignerChangeResolver implementation.
func (r *Resolver) SignerChange() graphql1.SignerChangeResolver { return &signerChangeResolver{r} }

// SignerThresholdsChange returns graphql1.SignerThresholdsChangeResolver implementation.
func (r *Resolver) SignerThresholdsChange() graphql1.SignerThresholdsChangeResolver {
	return &signerThresholdsChangeResolver{r}
}

// StandardBalanceChange returns graphql1.StandardBalanceChangeResolver implementation.
func (r *Resolver) StandardBalanceChange() graphql1.StandardBalanceChangeResolver {
	return &standardBalanceChangeResolver{r}
}

// TrustlineChange returns graphql1.TrustlineChangeResolver implementation.
func (r *Resolver) TrustlineChange() graphql1.TrustlineChangeResolver {
	return &trustlineChangeResolver{r}
}

type (
	accountChangeResolver              struct{ *Resolver }
	balanceAuthorizationChangeResolver struct{ *Resolver }
	flagsChangeResolver                struct{ *Resolver }
	metadataChangeResolver             struct{ *Resolver }
	reservesChangeResolver             struct{ *Resolver }
	signerChangeResolver               struct{ *Resolver }
	signerThresholdsChangeResolver     struct{ *Resolver }
	standardBalanceChangeResolver      struct{ *Resolver }
	trustlineChangeResolver            struct{ *Resolver }
)
