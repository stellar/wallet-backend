package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strings"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	"github.com/stellar/wallet-backend/internal/serve/graphql/dataloaders"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/stellar/wallet-backend/internal/serve/middleware"
)

// Operations is the resolver for the operations field.
// This is a field resolver for the "operations" field on a Transaction object
// It's called when a GraphQL query requests the operations within a transaction
func (r *transactionResolver) Operations(ctx context.Context, obj *types.Transaction, first *int32, after *string, last *int32, before *string) (*graphql1.OperationConnection, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.Operation{}, "")

	// Check if pagination parameters are provided
	isPaginated := first != nil || after != nil || last != nil || before != nil

	// Use dataloader for non-paginated requests to maintain batching efficiency
	// This is because pagination only works for single transactions, not for multiple transactions
	// This is why we have to use the dataloader for non-paginated requests
	if !isPaginated {
		loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
		loaderKey := dataloaders.OperationColumnsKey{
			TxHash:  obj.Hash,
			Columns: strings.Join(dbColumns, ", "),
		}

		operations, err := loaders.OperationsByTxHashLoader.Load(ctx, loaderKey)
		if err != nil {
			return nil, err
		}

		// Convert operations slice to connection format
		edges := make([]*graphql1.OperationEdge, len(operations))
		for i, op := range operations {
			edges[i] = &graphql1.OperationEdge{
				Node:   op,
				Cursor: encodeCursor(op.ID),
			}
		}

		var startCursor, endCursor *string
		if len(edges) > 0 {
			startCursor = &edges[0].Cursor
			endCursor = &edges[len(edges)-1].Cursor
		}

		return &graphql1.OperationConnection{
			Edges: edges,
			PageInfo: &graphql1.PageInfo{
				StartCursor:     startCursor,
				EndCursor:       endCursor,
				HasNextPage:     false, // No pagination means we have all results
				HasPreviousPage: false,
			},
		}, nil
	}

	// Handle paginated requests by bypassing dataloader
	params, err := parsePaginationParams(first, after, last, before, false)
	if err != nil {
		return nil, fmt.Errorf("parsing pagination params: %w", err)
	}
	queryLimit := *params.Limit + 1 // +1 to check if there is a next page

	operations, err := r.models.Operations.BatchGetByTxHash(ctx, obj.Hash, strings.Join(dbColumns, ", "), &queryLimit, params.Cursor, params.SortOrder)
	if err != nil {
		return nil, fmt.Errorf("getting paginated operations by tx hash: %w", err)
	}

	conn := NewConnectionWithRelayPagination(operations, params, func(o *types.OperationWithCursor) int64 {
		return o.Cursor
	})

	edges := make([]*graphql1.OperationEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.OperationEdge{
			Node:   &edge.Node.Operation,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.OperationConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// Accounts is the resolver for the accounts field.
// This is a field resolver for the "accounts" field on a Transaction object
// It's called when a GraphQL query requests the accounts within a transaction
func (r *transactionResolver) Accounts(ctx context.Context, obj *types.Transaction) ([]*types.Account, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
	dbColumns := GetDBColumnsForFields(ctx, types.Account{}, "accounts")

	// Use dataloader to batch-load accounts for this transaction
	// This prevents N+1 queries when multiple transactions request their operations
	// The loader groups multiple requests and executes them in a single database query
	loaderKey := dataloaders.AccountColumnsKey{
		TxHash:  obj.Hash,
		Columns: strings.Join(dbColumns, ", "),
	}
	accounts, err := loaders.AccountsByTxHashLoader.Load(ctx, loaderKey)
	if err != nil {
		return nil, err
	}
	return accounts, nil
}

// StateChanges is the resolver for the stateChanges field.
// This is a field resolver for the "stateChanges" field on a Transaction object
// It's called when a GraphQL query requests the state changes within a transaction
func (r *transactionResolver) StateChanges(ctx context.Context, obj *types.Transaction) ([]*types.StateChange, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
	dbColumns := GetDBColumnsForFields(ctx, types.StateChange{}, "")

	loaderKey := dataloaders.StateChangeColumnsKey{
		TxHash:  obj.Hash,
		Columns: strings.Join(dbColumns, ", "),
	}

	// Use dataloader to batch-load state changes for this transaction
	stateChanges, err := loaders.StateChangesByTxHashLoader.Load(ctx, loaderKey)
	if err != nil {
		return nil, err
	}
	return stateChanges, nil
}

// Transaction returns graphql1.TransactionResolver implementation.
func (r *Resolver) Transaction() graphql1.TransactionResolver { return &transactionResolver{r} }

type transactionResolver struct{ *Resolver }
