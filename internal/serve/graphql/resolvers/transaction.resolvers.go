package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	"github.com/stellar/wallet-backend/internal/serve/graphql/dataloaders"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/stellar/wallet-backend/internal/serve/middleware"
)

// Operations is the resolver for the operations field.
// This is a field resolver for the "operations" field on a Transaction object
// It's called when a GraphQL query requests the operations within a transaction
func (r *transactionResolver) Operations(ctx context.Context, obj *types.Transaction) ([]*types.Operation, error) {
	// Extract dataloaders from GraphQL context
	// Dataloaders are provided by middleware to enable efficient batch loading
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to batch-load operations for this transaction
	// This prevents N+1 queries when multiple transactions request their operations
	// The loader groups multiple requests and executes them in a single database query
	operations, err := loaders.OperationsByTxHashLoader.Load(ctx, obj.Hash)
	if err != nil {
		return nil, err
	}
	return operations, nil
}

// Accounts is the resolver for the accounts field.
func (r *transactionResolver) Accounts(ctx context.Context, obj *types.Transaction) ([]*types.Account, error) {
	panic(fmt.Errorf("not implemented: Accounts - accounts"))
}

// StateChanges is the resolver for the stateChanges field.
func (r *transactionResolver) StateChanges(ctx context.Context, obj *types.Transaction) ([]*types.StateChange, error) {
	panic(fmt.Errorf("not implemented: StateChanges - stateChanges"))
}

// Transaction returns graphql1.TransactionResolver implementation.
func (r *Resolver) Transaction() graphql1.TransactionResolver { return &transactionResolver{r} }

type transactionResolver struct{ *Resolver }
