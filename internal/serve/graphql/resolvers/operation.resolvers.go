package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	"github.com/stellar/wallet-backend/internal/serve/graphql/dataloaders"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/stellar/wallet-backend/internal/serve/middleware"
)

// Transaction is the resolver for the transaction field.
// This is a field resolver - it resolves the "transaction" field on an Operation object
// gqlgen calls this when a GraphQL query requests the transaction field on an Operation
// Field resolvers receive the parent object (Operation) and return the field value
func (r *operationResolver) Transaction(ctx context.Context, obj *types.Operation) (*types.Transaction, error) {
	// Extract dataloaders from GraphQL context
	// Dataloaders are injected by middleware to batch database queries
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to efficiently batch-load transaction for this operation
	// This prevents N+1 queries when multiple operations request their transaction
	transaction, err := loaders.TransactionsByOperationIDLoader.Load(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return transaction, nil
}

// Accounts is the resolver for the accounts field.
// This is a field resolver - it resolves the "accounts" field on an Operation object
// gqlgen calls this when a GraphQL query requests the accounts field on an Operation
// Field resolvers receive the parent object (Operation) and return the field value
func (r *operationResolver) Accounts(ctx context.Context, obj *types.Operation) ([]*types.Account, error) {
	// Extract dataloaders from GraphQL context
	// Dataloaders are injected by middleware to batch database queries
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to efficiently batch-load accounts for this operation
	// This prevents N+1 queries when multiple operations request their accounts
	accounts, err := loaders.AccountsByOperationIDLoader.Load(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return accounts, nil
}

// StateChanges is the resolver for the stateChanges field.
// This is a field resolver - it resolves the "stateChanges" field on an Operation object
// gqlgen calls this when a GraphQL query requests the stateChanges field on an Operation
// Field resolvers receive the parent object (Operation) and return the field value
func (r *operationResolver) StateChanges(ctx context.Context, obj *types.Operation) ([]*types.StateChange, error) {
	// Extract dataloaders from GraphQL context
	// Dataloaders are injected by middleware to batch database queries
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to efficiently batch-load state changes for this operation
	// This prevents N+1 queries when multiple operations request their state changes
	stateChanges, err := loaders.StateChangesByOperationIDLoader.Load(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return stateChanges, nil
}

// Operation returns graphql1.OperationResolver implementation.
func (r *Resolver) Operation() graphql1.OperationResolver { return &operationResolver{r} }

type operationResolver struct{ *Resolver }
