package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
)

// RegisterAccount is the resolver for the registerAccount field.
func (r *mutationResolver) RegisterAccount(ctx context.Context, input graphql1.RegisterAccountInput) (*graphql1.RegisterAccountPayload, error) {
	err := r.accountService.RegisterAccount(ctx, input.Address)
	if err != nil {
		return &graphql1.RegisterAccountPayload{
			Success: false,
			Message: &[]string{fmt.Sprintf("Failed to register account: %s", err.Error())}[0],
		}, nil
	}

	// Fetch the registered account to return in the payload
	account, err := r.models.Account.Get(ctx, input.Address)
	if err != nil {
		return &graphql1.RegisterAccountPayload{
			Success: true,
			Message: &[]string{"Account registered successfully but could not retrieve account details"}[0],
		}, nil
	}

	return &graphql1.RegisterAccountPayload{
		Success: true,
		Message: &[]string{"Account registered successfully"}[0],
		Account: account,
	}, nil
}

// DeregisterAccount is the resolver for the deregisterAccount field.
func (r *mutationResolver) DeregisterAccount(ctx context.Context, input graphql1.DeregisterAccountInput) (*graphql1.DeregisterAccountPayload, error) {
	err := r.accountService.DeregisterAccount(ctx, input.Address)
	if err != nil {
		return &graphql1.DeregisterAccountPayload{
			Success: false,
			Message: &[]string{fmt.Sprintf("Failed to deregister account: %s", err.Error())}[0],
		}, nil
	}

	return &graphql1.DeregisterAccountPayload{
		Success: true,
		Message: &[]string{"Account deregistered successfully"}[0],
	}, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
