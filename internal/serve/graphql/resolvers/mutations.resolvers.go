package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/stellar/wallet-backend/internal/data"
	"github.com/stellar/wallet-backend/internal/indexer/types"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// RegisterAccount is the resolver for the registerAccount field.
func (r *mutationResolver) RegisterAccount(ctx context.Context, input graphql1.RegisterAccountInput) (*graphql1.RegisterAccountPayload, error) {
	err := r.accountService.RegisterAccount(ctx, input.Address)
	if err != nil {
		if errors.Is(err, data.ErrAccountAlreadyExists) {
			return nil, &gqlerror.Error{
				Message: "Account is already registered",
				Extensions: map[string]interface{}{
					"code": "ACCOUNT_ALREADY_EXISTS",
				},
			}
		}
		return nil, &gqlerror.Error{
			Message: fmt.Sprintf("Failed to register account: %s", err.Error()),
			Extensions: map[string]interface{}{
				"code": "ACCOUNT_REGISTRATION_FAILED",
			},
		}
	}

	// Return the account data directly since we know the address
	account := &types.Account{
		StellarAddress: input.Address,
		CreatedAt:      time.Now(),
	}

	return &graphql1.RegisterAccountPayload{
		Account: account,
	}, nil
}

// DeregisterAccount is the resolver for the deregisterAccount field.
func (r *mutationResolver) DeregisterAccount(ctx context.Context, input graphql1.DeregisterAccountInput) (*graphql1.DeregisterAccountPayload, error) {
	err := r.accountService.DeregisterAccount(ctx, input.Address)
	if err != nil {
		if errors.Is(err, data.ErrAccountNotFound) {
			return nil, &gqlerror.Error{
				Message: "Account not found",
				Extensions: map[string]interface{}{
					"code": "ACCOUNT_NOT_FOUND",
				},
			}
		}
		return nil, &gqlerror.Error{
			Message: fmt.Sprintf("Failed to deregister account: %s", err.Error()),
			Extensions: map[string]interface{}{
				"code": "ACCOUNT_DEREGISTRATION_FAILED",
			},
		}
	}

	return &graphql1.DeregisterAccountPayload{
		Success: true,
		Message: &[]string{"Account deregistered successfully"}[0],
	}, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
