package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strings"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
)

// Address is the resolver for the address field.
func (r *accountResolver) Address(ctx context.Context, obj *types.Account) (string, error) {
	return obj.StellarAddress, nil
}

// Transactions is the resolver for the transactions field.
// This is a field resolver - it resolves the "transactions" field on an Account object
// gqlgen calls this when a GraphQL query requests the transactions field on an Account
// Field resolvers receive the parent object (Account) and return the field value
func (r *accountResolver) Transactions(ctx context.Context, obj *types.Account, first *int32, after *string, last *int32, before *string) (*graphql1.TransactionConnection, error) {
	params, err := parsePaginationParams(first, after, last, before, false)
	if err != nil {
		return nil, fmt.Errorf("parsing pagination params: %w", err)
	}
	queryLimit := *params.Limit + 1 // +1 to check if there is a next page

	dbColumns := GetDBColumnsForFields(ctx, types.Transaction{})
	transactions, err := r.models.Transactions.BatchGetByAccountAddress(ctx, obj.StellarAddress, strings.Join(dbColumns, ", "), &queryLimit, params.Cursor, params.SortOrder)
	if err != nil {
		return nil, fmt.Errorf("getting transactions from db for account %s: %w", obj.StellarAddress, err)
	}

	conn := NewConnectionWithRelayPagination(transactions, params, func(tx *types.TransactionWithCursor) int64 {
		return tx.Cursor
	})

	edges := make([]*graphql1.TransactionEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.TransactionEdge{
			Node:   &edge.Node.Transaction,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.TransactionConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// Operations is the resolver for the operations field.
// This field resolver handles the "operations" field on an Account object
func (r *accountResolver) Operations(ctx context.Context, obj *types.Account, first *int32, after *string, last *int32, before *string) (*graphql1.OperationConnection, error) {
	params, err := parsePaginationParams(first, after, last, before, false)
	if err != nil {
		return nil, fmt.Errorf("parsing pagination params: %w", err)
	}
	queryLimit := *params.Limit + 1 // +1 to check if there is a next page

	dbColumns := GetDBColumnsForFields(ctx, types.Operation{})
	operations, err := r.models.Operations.BatchGetByAccountAddress(ctx, obj.StellarAddress, strings.Join(dbColumns, ", "), &queryLimit, params.Cursor, params.SortOrder)
	if err != nil {
		return nil, fmt.Errorf("getting operations from db for account %s: %w", obj.StellarAddress, err)
	}

	conn := NewConnectionWithRelayPagination(operations, params, func(op *types.OperationWithCursor) int64 {
		return op.Cursor
	})

	edges := make([]*graphql1.OperationEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.OperationEdge{
			Node:   &edge.Node.Operation,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.OperationConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// StateChanges is the resolver for the stateChanges field.
func (r *accountResolver) StateChanges(ctx context.Context, obj *types.Account, first *int32, after *string, last *int32, before *string) (*graphql1.StateChangeConnection, error) {
	params, err := parsePaginationParams(first, after, last, before, true)
	if err != nil {
		return nil, fmt.Errorf("parsing pagination params: %w", err)
	}
	queryLimit := *params.Limit + 1 // +1 to check if there is a next page

	dbColumns := GetDBColumnsForFields(ctx, types.StateChange{})
	stateChanges, err := r.models.StateChanges.BatchGetByAccountAddress(ctx, obj.StellarAddress, strings.Join(dbColumns, ", "), &queryLimit, params.StateChangeCursor, params.SortOrder)
	if err != nil {
		return nil, fmt.Errorf("getting state changes from db for account %s: %w", obj.StellarAddress, err)
	}

	conn := NewConnectionWithRelayPagination(stateChanges, params, func(sc *types.StateChangeWithCursor) string {
		return fmt.Sprintf("%d:%d", sc.Cursor.ToID, sc.Cursor.StateChangeOrder)
	})

	edges := make([]*graphql1.StateChangeEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.StateChangeEdge{
			Node:   &edge.Node.StateChange,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.StateChangeConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// Account returns graphql1.AccountResolver implementation.
func (r *Resolver) Account() graphql1.AccountResolver { return &accountResolver{r} }

type accountResolver struct{ *Resolver }
