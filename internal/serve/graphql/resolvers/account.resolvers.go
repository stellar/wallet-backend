package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strings"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	"github.com/stellar/wallet-backend/internal/serve/graphql/dataloaders"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/stellar/wallet-backend/internal/serve/middleware"
)

// Address is the resolver for the address field.
func (r *accountResolver) Address(ctx context.Context, obj *types.Account) (string, error) {
	return obj.StellarAddress, nil
}

// Transactions is the resolver for the transactions field.
// This is a field resolver - it resolves the "transactions" field on an Account object
// gqlgen calls this when a GraphQL query requests the transactions field on an Account
// Field resolvers receive the parent object (Account) and return the field value
func (r *accountResolver) Transactions(ctx context.Context, obj *types.Account, first *int32, after *string) (*graphql1.TransactionConnection, error) {
	cursor, err := DecodeInt64Cursor(after)
	if err != nil {
		return nil, err
	}

	limit := int32(100)
	if first != nil {
		limit = *first
	}
	queryLimit := limit + 1 // +1 to check if there is a next page

	dbColumns := GetDBColumnsForFields(ctx, types.Transaction{}, "transactions")
	transactions, err := r.models.Transactions.BatchGetByAccountAddress(ctx, obj.StellarAddress, strings.Join(dbColumns, ", "), &queryLimit, cursor)
	if err != nil {
		return nil, fmt.Errorf("getting transactions from db for account %s: %w", obj.StellarAddress, err)
	}

	conn := NewConnection(transactions, limit, after, func(tx *types.TransactionWithCursor) int64 {
		return tx.Cursor
	})

	edges := make([]*graphql1.TransactionEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.TransactionEdge{
			Node:   &edge.Node.Transaction,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.TransactionConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// Operations is the resolver for the operations field.
// This field resolver handles the "operations" field on an Account object
// Demonstrates the same dataloader pattern as Transactions resolver
func (r *accountResolver) Operations(ctx context.Context, obj *types.Account) ([]*types.Operation, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
	dbColumns := GetDBColumnsForFields(ctx, types.Operation{}, "operations")

	loaderKey := dataloaders.OperationColumnsKey{
		AccountID: obj.StellarAddress,
		Columns:   strings.Join(dbColumns, ", "),
	}

	// Use dataloader to batch-load operations for this account
	operations, err := loaders.OperationsByAccountLoader.Load(ctx, loaderKey)
	if err != nil {
		return nil, err
	}
	return operations, nil
}

// StateChanges is the resolver for the stateChanges field.
func (r *accountResolver) StateChanges(ctx context.Context, obj *types.Account) ([]*types.StateChange, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
	dbColumns := GetDBColumnsForFields(ctx, types.StateChange{}, "state_changes")

	// Use dataloader to batch-load state changes for this account
	loaderKey := dataloaders.StateChangeColumnsKey{
		AccountID: obj.StellarAddress,
		Columns:   strings.Join(dbColumns, ", "),
	}
	stateChanges, err := loaders.StateChangesByAccountLoader.Load(ctx, loaderKey)
	if err != nil {
		return nil, err
	}
	return stateChanges, nil
}

// Account returns graphql1.AccountResolver implementation.
func (r *Resolver) Account() graphql1.AccountResolver { return &accountResolver{r} }

type accountResolver struct{ *Resolver }
