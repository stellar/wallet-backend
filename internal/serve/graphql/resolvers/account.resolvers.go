package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	"github.com/stellar/wallet-backend/internal/serve/graphql/dataloaders"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/stellar/wallet-backend/internal/serve/middleware"
)

// Transactions is the resolver for the transactions field.
// This is a field resolver - it resolves the "transactions" field on an Account object
// gqlgen calls this when a GraphQL query requests the transactions field on an Account
// Field resolvers receive the parent object (Account) and return the field value
func (r *accountResolver) Transactions(ctx context.Context, obj *types.Account) ([]*types.Transaction, error) {
	// Extract dataloaders from GraphQL context
	// Dataloaders are injected by middleware to batch database queries
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to efficiently batch-load transactions for this account
	// This prevents N+1 queries when multiple accounts request their transactions
	transactions, err := loaders.TransactionsByAccountLoader.Load(ctx, obj.StellarAddress)
	if err != nil {
		return nil, err
	}
	return transactions, nil
}

// Operations is the resolver for the operations field.
// This field resolver handles the "operations" field on an Account object
// Demonstrates the same dataloader pattern as Transactions resolver
func (r *accountResolver) Operations(ctx context.Context, obj *types.Account) ([]*types.Operation, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to batch-load operations for this account
	// Dataloaders automatically batch multiple requests and cache results
	operations, err := loaders.OperationsByAccountLoader.Load(ctx, obj.StellarAddress)
	if err != nil {
		return nil, err
	}
	return operations, nil
}

// Statechanges is the resolver for the statechanges field.
// This field resolver handles the "statechanges" field on an Account object
// Demonstrates the same dataloader pattern as Transactions and Operations resolvers
func (r *accountResolver) Statechanges(ctx context.Context, obj *types.Account) ([]*types.StateChange, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)

	// Use dataloader to batch-load state changes for this account
	// Dataloaders automatically batch multiple requests and cache results
	stateChanges, err := loaders.StateChangesByAccountLoader.Load(ctx, obj.StellarAddress)
	if err != nil {
		return nil, err
	}
	return stateChanges, nil
}

// Account returns graphql1.AccountResolver implementation.
func (r *Resolver) Account() graphql1.AccountResolver { return &accountResolver{r} }

type accountResolver struct{ *Resolver }
