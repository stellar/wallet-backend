package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	"github.com/stellar/wallet-backend/internal/serve/graphql/dataloaders"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
	"github.com/stellar/wallet-backend/internal/serve/middleware"
)

// Transactions is the resolver for the transactions field.
func (r *accountResolver) Transactions(ctx context.Context, obj *types.Account) ([]*types.Transaction, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
	transactions, err := loaders.TransactionsByAccountLoader.Load(ctx, obj.StellarAddress)
	if err != nil {
		return nil, err
	}
	return transactions, nil
}

// Operations is the resolver for the operations field.
func (r *accountResolver) Operations(ctx context.Context, obj *types.Account) ([]*types.Operation, error) {
	loaders := ctx.Value(middleware.LoadersKey).(*dataloaders.Dataloaders)
	operations, err := loaders.OperationsByAccountLoader.Load(ctx, obj.StellarAddress)
	if err != nil {
		return nil, err
	}
	return operations, nil
}

// Statechanges is the resolver for the statechanges field.
func (r *accountResolver) Statechanges(ctx context.Context, obj *types.Account) ([]*types.StateChange, error) {
	panic(fmt.Errorf("not implemented: Statechanges - statechanges"))
}

// Account returns graphql1.AccountResolver implementation.
func (r *Resolver) Account() graphql1.AccountResolver { return &accountResolver{r} }

type accountResolver struct{ *Resolver }
