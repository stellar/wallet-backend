package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"strings"
	"github.com/stellar/wallet-backend/internal/indexer/types"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
)

// TransactionByHash is the resolver for the transactionByHash field.
// This is a root query resolver - it handles the "transactionByHash" query.
// gqlgen calls this function when a GraphQL query requests "transactionByHash"
func (r *queryResolver) TransactionByHash(ctx context.Context, hash string) (*types.Transaction, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.Transaction{}, "")
	return r.models.Transactions.GetByHash(ctx, hash, strings.Join(dbColumns, ", "))
}

// Transactions is the resolver for the transactions field.
// This resolver handles the "transactions" query.
// It demonstrates handling optional arguments (limit can be nil)
func (r *queryResolver) Transactions(ctx context.Context, limit *int32) ([]*types.Transaction, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.Transaction{}, "")
	return r.models.Transactions.GetAll(ctx, limit, strings.Join(dbColumns, ", "))
}

// Account is the resolver for the account field.
// This resolver handles the "account" query.
// It shows the standard pattern: receive args, query data, return result or error
func (r *queryResolver) Account(ctx context.Context, address string) (*types.Account, error) {
	return r.models.Account.Get(ctx, address)
}

// Operations is the resolver for the operations field.
// This resolver handles the "operations" query.
func (r *queryResolver) Operations(ctx context.Context, limit *int32) ([]*types.Operation, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.Operation{}, "")
	return r.models.Operations.GetAll(ctx, limit, strings.Join(dbColumns, ", "))
}

// StateChanges is the resolver for the stateChanges field.
func (r *queryResolver) StateChanges(ctx context.Context, limit *int32) ([]*types.StateChange, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.StateChange{}, "")
	return r.models.StateChanges.GetAll(ctx, limit, strings.Join(dbColumns, ", "))
}

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
