package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strings"

	"github.com/stellar/wallet-backend/internal/indexer/types"
	graphql1 "github.com/stellar/wallet-backend/internal/serve/graphql/generated"
)

// TransactionByHash is the resolver for the transactionByHash field.
// This is a root query resolver - it handles the "transactionByHash" query.
// gqlgen calls this function when a GraphQL query requests "transactionByHash"
func (r *queryResolver) TransactionByHash(ctx context.Context, hash string) (*types.Transaction, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.Transaction{}, "")
	return r.models.Transactions.GetByHash(ctx, hash, strings.Join(dbColumns, ", "))
}

// Transactions is the resolver for the transactions field.
// This resolver handles the "transactions" query.
// It demonstrates handling optional arguments (limit can be nil)
func (r *queryResolver) Transactions(ctx context.Context, first *int32, after *string) (*graphql1.TransactionConnection, error) {
	afterCursor, err := DecodeCursor(after)
	if err != nil {
		return nil, fmt.Errorf("decoding cursor: %w", err)
	}

	limit := int32(50)
	if first != nil {
		limit = *first
	}

	dbColumns := GetDBColumnsForFields(ctx, types.Transaction{}, "")
	transactions, err := r.models.Transactions.GetAll(ctx, &limit, strings.Join(dbColumns, ", "), afterCursor)
	if err != nil {
		return nil, fmt.Errorf("getting transactions from db: %w", err)
	}

	conn := NewConnection(transactions, limit, after, func(tx *types.Transaction) int64 {
		return tx.ToID
	})

	edges := make([]*graphql1.TransactionsEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.TransactionsEdge{
			Node:   edge.Node,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.TransactionConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// Account is the resolver for the account field.
// This resolver handles the "account" query.
// It shows the standard pattern: receive args, query data, return result or error
func (r *queryResolver) Account(ctx context.Context, address string) (*types.Account, error) {
	return r.models.Account.Get(ctx, address)
}

// Operations is the resolver for the operations field.
// This resolver handles the "operations" query.
func (r *queryResolver) Operations(ctx context.Context, first *int32, after *string) (*graphql1.OperationConnection, error) {
	afterCursor, err := DecodeCursor(after)
	if err != nil {
		return nil, fmt.Errorf("decoding cursor: %w", err)
	}

	limit := int32(50)
	if first != nil {
		limit = *first
	}

	dbColumns := GetDBColumnsForFields(ctx, types.Operation{}, "")
	operations, err := r.models.Operations.GetAll(ctx, &limit, strings.Join(dbColumns, ", "), afterCursor)
	if err != nil {
		return nil, fmt.Errorf("getting operations from db: %w", err)
	}

	conn := NewConnection(operations, limit, after, func(op *types.Operation) int64 {
		return op.ID
	})

	edges := make([]*graphql1.OperationsEdge, len(conn.Edges))
	for i, edge := range conn.Edges {
		edges[i] = &graphql1.OperationsEdge{
			Node:   edge.Node,
			Cursor: edge.Cursor,
		}
	}

	return &graphql1.OperationConnection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}, nil
}

// StateChanges is the resolver for the stateChanges field.
func (r *queryResolver) StateChanges(ctx context.Context, limit *int32) ([]*types.StateChange, error) {
	dbColumns := GetDBColumnsForFields(ctx, types.StateChange{}, "")
	return r.models.StateChanges.GetAll(ctx, limit, strings.Join(dbColumns, ", "))
}

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
