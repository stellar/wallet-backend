package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/stellar/wallet-backend/internal/indexer/types"
)

// LedgerNumber is the resolver for the ledgerNumber field.
func (r *stateChangeResolver) LedgerNumber(ctx context.Context, obj *types.StateChange) (int32, error) {
	panic(fmt.Errorf("not implemented: LedgerNumber - ledgerNumber"))
}

// TokenID is the resolver for the tokenId field.
func (r *stateChangeResolver) TokenID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: TokenID - tokenId"))
}

// Amount is the resolver for the amount field.
func (r *stateChangeResolver) Amount(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: Amount - amount"))
}

// ClaimableBalanceID is the resolver for the claimableBalanceId field.
func (r *stateChangeResolver) ClaimableBalanceID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: ClaimableBalanceID - claimableBalanceId"))
}

// LiquidityPoolID is the resolver for the liquidityPoolId field.
func (r *stateChangeResolver) LiquidityPoolID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: LiquidityPoolID - liquidityPoolId"))
}

// OfferID is the resolver for the offerId field.
func (r *stateChangeResolver) OfferID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: OfferID - offerId"))
}

// SignerAccountID is the resolver for the signerAccountId field.
func (r *stateChangeResolver) SignerAccountID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: SignerAccountID - signerAccountId"))
}

// SpenderAccountID is the resolver for the spenderAccountId field.
func (r *stateChangeResolver) SpenderAccountID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: SpenderAccountID - spenderAccountId"))
}

// SponsoredAccountID is the resolver for the sponsoredAccountId field.
func (r *stateChangeResolver) SponsoredAccountID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: SponsoredAccountID - sponsoredAccountId"))
}

// SponsorAccountID is the resolver for the sponsorAccountId field.
func (r *stateChangeResolver) SponsorAccountID(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: SponsorAccountID - sponsorAccountId"))
}

// SignerWeights is the resolver for the signerWeights field.
func (r *stateChangeResolver) SignerWeights(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: SignerWeights - signerWeights"))
}

// Thresholds is the resolver for the thresholds field.
func (r *stateChangeResolver) Thresholds(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: Thresholds - thresholds"))
}

// Flags is the resolver for the flags field.
func (r *stateChangeResolver) Flags(ctx context.Context, obj *types.StateChange) ([]string, error) {
	panic(fmt.Errorf("not implemented: Flags - flags"))
}

// KeyValue is the resolver for the keyValue field.
func (r *stateChangeResolver) KeyValue(ctx context.Context, obj *types.StateChange) (*string, error) {
	panic(fmt.Errorf("not implemented: KeyValue - keyValue"))
}

// LedgerNumber is the resolver for the ledgerNumber field.
func (r *transactionResolver) LedgerNumber(ctx context.Context, obj *types.Transaction) (int32, error) {
	panic(fmt.Errorf("not implemented: LedgerNumber - ledgerNumber"))
}

// StateChange returns StateChangeResolver implementation.
func (r *Resolver) StateChange() StateChangeResolver { return &stateChangeResolver{r} }

// Transaction returns TransactionResolver implementation.
func (r *Resolver) Transaction() TransactionResolver { return &transactionResolver{r} }

type stateChangeResolver struct{ *Resolver }
type transactionResolver struct{ *Resolver }
