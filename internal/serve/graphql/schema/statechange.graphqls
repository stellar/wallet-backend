# GraphQL StateChange type - represents changes to blockchain state
interface BaseStateChange {           
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!

  # GraphQL Relationships - these fields use resolvers
  # Related operation - nullable since fee state changes do not have operations associated with them
  account:                    Account! @goField(forceResolver: true)

  # Related operation - nullable since fee state changes do not have operations associated with them
  operation:                  Operation @goField(forceResolver: true)
  
  # Related transaction
  transaction:                Transaction! @goField(forceResolver: true)
}

type BalanceStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  tokenId:                    String!              
  amount:                     String!
}

type AccountStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  tokenId:                    String!              
  amount:                     String!
}

type SignerStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  signerAddress:              String
  signerWeights:              String
}

type SignerThresholdsStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  thresholds:                 String!
}

type MetadataStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  keyValue:                   String!
}

type FlagsStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  flags:                      [String!]!
}

type TrustlineStateChange implements BaseStateChange {
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  limit:                      String!
}

type SponsorshipStateChange implements BaseStateChange{
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  sponsoredAddress:         String   
  sponsorAddress:           String
}

type BalanceAuthorizationStateChange implements BaseStateChange{
  type:                       StateChangeCategory! @goField(forceResolver: true)
  reason:                     StateChangeReason! @goField(forceResolver: true)
  ingestedAt:                 Time!
  ledgerCreatedAt:            Time!
  ledgerNumber:               UInt32!
  account:                    Account! @goField(forceResolver: true)
  operation:                  Operation @goField(forceResolver: true)
  transaction:                Transaction! @goField(forceResolver: true)

  flags:                      [String!]!
}
