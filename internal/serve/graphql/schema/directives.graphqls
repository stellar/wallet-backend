# GraphQL Directive - provides metadata to control gqlgen code generation
# Directives are like annotations that modify how GraphQL processes fields

# @goField directive - controls how gqlgen generates Go code for fields
# This is a gqlgen-specific directive for customizing field resolution
directive @goField(
	# forceResolver: Boolean - forces gqlgen to generate a resolver function
	# even if the Go struct has a matching field name
	# Useful when you need custom logic for field resolution
	forceResolver: Boolean
	
	# name: String - specifies the Go struct field name to map to
	# Allows mapping GraphQL field names to different Go field names
	name: String
	
	# omittable: Boolean - indicates if the field can be omitted from queries
	# Used for optional fields in input types
	omittable: Boolean
	
	# type: String - specifies the Go type for the field
	# Overrides gqlgen's default type inference
	type: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# --- Apollo Federation Directives ---

# @key directive - specifies the primary key of an entity
# This is how the Apollo Gateway uniquely identifies and fetches entities
directive @key(fields: String!) on OBJECT | INTERFACE

# @extends directive - indicates that a type is an extension of an entity
# defined in another service
directive @extends on OBJECT | INTERFACE

# @external directive - marks a field as being defined by another service
# This field is only used for resolving other fields within the same service
directive @external on FIELD_DEFINITION

# @requires directive - indicates that a field's resolver requires other fields
# The gateway will ensure the required fields are available before resolving
directive @requires(fields: String!) on FIELD_DEFINITION

# @provides directive - annotates a field that can be resolved by this service
# for an entity defined in another service
directive @provides(fields: String!) on FIELD_DEFINITION
