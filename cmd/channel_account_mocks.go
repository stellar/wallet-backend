// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cmd

import (
	"context"

	"github.com/stellar/wallet-backend/internal/services"
	mock "github.com/stretchr/testify/mock"
)

// NewMockChAccCmdServiceInterface creates a new instance of MockChAccCmdServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChAccCmdServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChAccCmdServiceInterface {
	mock := &MockChAccCmdServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChAccCmdServiceInterface is an autogenerated mock type for the ChAccCmdServiceInterface type
type MockChAccCmdServiceInterface struct {
	mock.Mock
}

type MockChAccCmdServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChAccCmdServiceInterface) EXPECT() *MockChAccCmdServiceInterface_Expecter {
	return &MockChAccCmdServiceInterface_Expecter{mock: &_m.Mock}
}

// EnsureChannelAccounts provides a mock function for the type MockChAccCmdServiceInterface
func (_mock *MockChAccCmdServiceInterface) EnsureChannelAccounts(ctx context.Context, chAccService services.ChannelAccountService, amount int64) error {
	ret := _mock.Called(ctx, chAccService, amount)

	if len(ret) == 0 {
		panic("no return value specified for EnsureChannelAccounts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ChannelAccountService, int64) error); ok {
		r0 = returnFunc(ctx, chAccService, amount)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChAccCmdServiceInterface_EnsureChannelAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureChannelAccounts'
type MockChAccCmdServiceInterface_EnsureChannelAccounts_Call struct {
	*mock.Call
}

// EnsureChannelAccounts is a helper method to define mock.On call
//   - ctx
//   - chAccService
//   - amount
func (_e *MockChAccCmdServiceInterface_Expecter) EnsureChannelAccounts(ctx interface{}, chAccService interface{}, amount interface{}) *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call {
	return &MockChAccCmdServiceInterface_EnsureChannelAccounts_Call{Call: _e.mock.On("EnsureChannelAccounts", ctx, chAccService, amount)}
}

func (_c *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call) Run(run func(ctx context.Context, chAccService services.ChannelAccountService, amount int64)) *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.ChannelAccountService), args[2].(int64))
	})
	return _c
}

func (_c *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call) Return(err error) *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call) RunAndReturn(run func(ctx context.Context, chAccService services.ChannelAccountService, amount int64) error) *MockChAccCmdServiceInterface_EnsureChannelAccounts_Call {
	_c.Call.Return(run)
	return _c
}
