services:
  wb-db:
    container_name: wb-db
    image: postgres:14-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "wallet-backend"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: wallet-backend
      PGDATA: /data/postgres
      PGPORT: 5442
    volumes:
      - postgres-wb-db:/data/postgres
    ports:
      - 5442:5442

  wb-api:
    container_name: wb-api
    image: stellar/wallet-backend:development
    healthcheck:
      test: "curl --fail --silent --show-error --location 'http://localhost:8101/health' | grep -q '\"status\": \"ok\"'"
      interval: 10s
      timeout: 10s
      retries: 3
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      wb-db:
        condition: service_healthy
      wb-ingest:
        condition: service_healthy
    ports:
      - 8101:8101
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        ./wallet-backend channel-account ensure ${NUMBER_CHANNEL_ACCOUNTS:-2}
        ./wallet-backend serve
    environment:
      RPC_URL: ${RPC_URL:-https://soroban-testnet.stellar.org}
      DATABASE_URL: postgres://postgres@wb-db:5442/wallet-backend?sslmode=disable
      PORT: 8101
      SERVER_BASE_URL: http://wb-api:8101
      LOG_LEVEL: TRACE
      CLIENT_AUTH_PUBLIC_KEYS: ${CLIENT_AUTH_PUBLIC_KEYS}
      DISTRIBUTION_ACCOUNT_PUBLIC_KEY: ${DISTRIBUTION_PUBLIC_KEY}
      DISTRIBUTION_ACCOUNT_SIGNATURE_PROVIDER: ${DISTRIBUTION_ACCOUNT_SIGNATURE_PROVIDER:-ENV}
      NUMBER_CHANNEL_ACCOUNTS: ${NUMBER_CHANNEL_ACCOUNTS:-2}
      CLIENT_AUTH_MAX_TIMEOUT_SECONDS: ${CLIENT_AUTH_MAX_TIMEOUT_SECONDS:-60}

      # Env Signature Client
      DISTRIBUTION_ACCOUNT_PRIVATE_KEY: ${DISTRIBUTION_SEED}

      # (optional) KMS Signature Client
      KMS_KEY_ARN: ${KMS_KEY_ARN}
      AWS_REGIONG: ${AWS_REGION}
      # (optional) Using KMS locally is necessary to inject the AWS credentials envs.
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}

      # Channel Account
      CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE: ${CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE}
      TRACKER_DSN: ${TRACKER_DSN}
      STELLAR_ENVIRONMENT: ${STELLAR_ENVIRONMENT:-development}

  wb-ingest:
    container_name: wb-ingest
    image: stellar/wallet-backend:development
    healthcheck:
      test: "curl --fail --silent --show-error --location 'http://localhost:8102/health' | grep -q '\"status\": \"ok\"'"
      interval: 10s
      timeout: 10s
      retries: 3
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      wb-db:
        condition: service_healthy
    ports:
      - 8102:8102
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        ./wallet-backend migrate up
        echo "Testing RPC connectivity..."
        echo "RPC_URL: $RPC_URL"
        HEALTH_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' "${RPC_URL}")
        echo "HEALTH_RESPONSE: $$HEALTH_RESPONSE"
        LATEST_LEDGER=$(echo "$$HEALTH_RESPONSE" | grep -oE '"latestLedger":[0-9]+' | grep -oE '[0-9]+' || true)
        echo "LATEST_LEDGER: $$LATEST_LEDGER"
        if [ -z "$$LATEST_LEDGER" ] || [ "$$LATEST_LEDGER" = "" ]; then
          ./wallet-backend ingest
        else
          ./wallet-backend ingest --start-ledger "$$LATEST_LEDGER"
        fi
    environment:
      RPC_URL: ${RPC_URL:-https://soroban-testnet.stellar.org}
      DATABASE_URL: postgres://postgres@wb-db:5442/wallet-backend?sslmode=disable
      TRACKER_DSN: ${TRACKER_DSN}
      STELLAR_ENVIRONMENT: ${STELLAR_ENVIRONMENT:-development}
      INGEST_SERVER_PORT: ${INGEST_SERVER_PORT:-8102}
      GET_LEDGERS_LIMIT: ${GET_LEDGERS_LIMIT:-50}
volumes:
  postgres-wb-db:
    driver: local
