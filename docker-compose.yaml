services:
  db:
    container_name: db
    image: postgres:14-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "wallet-backend"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: wallet-backend
      PGDATA: /data/postgres
    volumes:
      - postgres-db:/data/postgres
    ports:
      - 5432:5432

  stellar-rpc:
    container_name: stellar-rpc
    image: stellar/stellar-rpc:stable
    healthcheck:
      test: "curl --location 'http://localhost:8000/' -H 'Content-Type: application/json' -d '{\"jsonrpc\":\"2.0\",\"id\":8675309,\"method\":\"getHealth\"}' | grep -q '\"status\":\"healthy\"'"
      interval: 10s
      timeout: 10s
      retries: 40
      start_period: 10s
    ports:
      - 8000:8000
    volumes:
      - ./config:/config
    environment:
      NETWORK: ${NETWORK}
    entrypoint: ["/bin/bash", "/config/soroban_rpc_startup.sh"]

  api:
    container_name: api
    image: stellar/wallet-backend:development
    healthcheck:
      test: "curl --fail --silent --show-error --location 'http://localhost:8001/health' | grep -q '\"status\": \"pass\"'"
      interval: 10s
      timeout: 10s
      retries: 3
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      stellar-rpc:
        condition: service_started
    ports:
      - 8001:8001
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        ./wallet-backend migrate up
        ./wallet-backend channel-account ensure ${NUMBER_CHANNEL_ACCOUNTS:-2}
        ./wallet-backend serve
    environment:
      RPC_URL: ${RPC_URL:-http://stellar-rpc:8000}
      DATABASE_URL: postgres://postgres@db:5432/wallet-backend?sslmode=disable
      PORT: 8001
      SERVER_BASE_URL: http://api:8001
      LOG_LEVEL: TRACE
      CLIENT_AUTH_PUBLIC_KEYS: ${CLIENT_AUTH_PUBLIC_KEYS}
      DISTRIBUTION_ACCOUNT_PUBLIC_KEY: ${DISTRIBUTION_ACCOUNT_PUBLIC_KEY}
      DISTRIBUTION_ACCOUNT_SIGNATURE_PROVIDER: ${DISTRIBUTION_ACCOUNT_SIGNATURE_PROVIDER}
      NUMBER_CHANNEL_ACCOUNTS: ${NUMBER_CHANNEL_ACCOUNTS:-2}

      # Env Signature Client
      DISTRIBUTION_ACCOUNT_PRIVATE_KEY: ${DISTRIBUTION_ACCOUNT_PRIVATE_KEY}

      # (optional) KMS Signature Client
      KMS_KEY_ARN: ${KMS_KEY_ARN}
      AWS_REGIONG: ${AWS_REGION}
      # (optional) Using KMS locally is necessary to inject the AWS credentials envs.
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}

      # Channel Account
      CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE: ${CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE}
      TRACKER_DSN: ${TRACKER_DSN}
      STELLAR_ENVIRONMENT: ${STELLAR_ENVIRONMENT}

      # (optional) Integration Tests
      CLIENT_AUTH_PRIVATE_KEY: ${CLIENT_AUTH_PRIVATE_KEY}
      WALLET_SOURCE_ACCOUNT_PRIVATE_KEY: ${WALLET_SOURCE_ACCOUNT_PRIVATE_KEY}

  ingest:
    container_name: ingest
    image: stellar/wallet-backend:development
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
      stellar-rpc:
        condition: service_started
    entrypoint: ""
    command:
      - sh
      - -c
      - ./wallet-backend ingest
    environment:
      RPC_URL: ${RPC_URL:-http://stellar-rpc:8000}
      DATABASE_URL: postgres://postgres@db:5432/wallet-backend?sslmode=disable
      TRACKER_DSN: ${TRACKER_DSN}
      STELLAR_ENVIRONMENT: ${STELLAR_ENVIRONMENT}
volumes:
  postgres-db:
    driver: local
